{"version":3,"file":"static/js/962.93536843.chunk.js","mappings":"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","sources":["components/common/AppInitializer.js","services/notificationService.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { initDatabase, checkOnlineStatus } from '../../services/offlineStorage';\nimport { initSyncService, syncAllUserData, syncFromServer } from '../../services/syncService';\nimport { registerServiceWorker, checkScheduledNotifications } from '../../services/notificationService';\nimport { showInfo, showError, showSuccess } from './Notification';\nimport styled from 'styled-components';\nimport { FiRefreshCw, FiWifi, FiWifiOff, FiCheck, FiAlertTriangle } from 'react-icons/fi';\n\n// Estilos para el indicador de sincronización\nconst SyncContainer = styled.div`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  padding: 10px 16px;\n  border-radius: 12px;\n  font-size: 0.9rem;\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  transition: all 0.3s ease;\n  max-width: 300px;\n\n  &.hidden {\n    transform: translateY(100px);\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  &.success {\n    background-color: rgba(34, 139, 34, 0.9);\n  }\n\n  &.warning {\n    background-color: rgba(255, 165, 0, 0.9);\n  }\n\n  &.error {\n    background-color: rgba(220, 53, 69, 0.9);\n  }\n`;\n\nconst SyncButton = styled.button`\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n  border-radius: 50%;\n  margin-left: 8px;\n  transition: all 0.2s;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  svg {\n    animation: ${props => props.spinning ? 'spin 1s linear infinite' : 'none'};\n  }\n\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n`;\n\nconst SyncStatus = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  .sync-title {\n    font-weight: 600;\n    margin-bottom: 2px;\n  }\n\n  .sync-message {\n    font-size: 0.8rem;\n    opacity: 0.9;\n  }\n`;\n\n/**\n * Componente para inicializar la aplicación y sincronizar datos\n * @returns {JSX.Element} - Componente de inicialización y sincronización\n */\nconst AppInitializer = () => {\n  const { user } = useAuth();\n  const [initializing, setInitializing] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n  const [syncStatus, setSyncStatus] = useState({\n    visible: false,\n    status: 'idle', // 'idle', 'syncing', 'success', 'warning', 'error'\n    title: '',\n    message: '',\n    lastSync: null\n  });\n  const [isOnline, setIsOnline] = useState(checkOnlineStatus());\n\n  // Función para sincronizar datos\n  const syncData = useCallback(async (force = false) => {\n    if (!user || !initialized) return;\n\n    // Si no está en línea, mostrar mensaje\n    if (!checkOnlineStatus()) {\n      setSyncStatus({\n        visible: true,\n        status: 'warning',\n        title: 'Sin conexión',\n        message: 'No se pueden sincronizar datos sin conexión a Internet',\n        lastSync: syncStatus.lastSync\n      });\n\n      // Ocultar después de 3 segundos\n      setTimeout(() => {\n        setSyncStatus(prev => ({ ...prev, visible: false }));\n      }, 3000);\n\n      return;\n    }\n\n    try {\n      // Mostrar estado de sincronización\n      setSyncStatus({\n        visible: true,\n        status: 'syncing',\n        title: 'Sincronizando datos...',\n        message: 'Obteniendo datos más recientes',\n        lastSync: syncStatus.lastSync\n      });\n\n      // Sincronizar todos los datos del usuario\n      const result = await syncAllUserData(user.id, force);\n\n      if (result.success) {\n        console.log('Datos sincronizados correctamente:', result);\n\n        // Actualizar estado de sincronización\n        setSyncStatus({\n          visible: true,\n          status: 'success',\n          title: 'Sincronización completada',\n          message: `${result.succeeded} almacenes sincronizados`,\n          lastSync: new Date()\n        });\n\n        // Ocultar después de 3 segundos\n        setTimeout(() => {\n          setSyncStatus(prev => ({ ...prev, visible: false }));\n        }, 3000);\n      } else {\n        console.warn('Advertencia al sincronizar datos:', result);\n\n        // Actualizar estado de sincronización\n        setSyncStatus({\n          visible: true,\n          status: 'warning',\n          title: 'Sincronización parcial',\n          message: `${result.succeeded} sincronizados, ${result.failed} fallidos`,\n          lastSync: new Date()\n        });\n\n        // Ocultar después de 5 segundos\n        setTimeout(() => {\n          setSyncStatus(prev => ({ ...prev, visible: false }));\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error al sincronizar datos del usuario:', error);\n\n      // Actualizar estado de sincronización\n      setSyncStatus({\n        visible: true,\n        status: 'error',\n        title: 'Error de sincronización',\n        message: error.message || 'No se pudieron sincronizar los datos',\n        lastSync: syncStatus.lastSync\n      });\n\n      // Ocultar después de 5 segundos\n      setTimeout(() => {\n        setSyncStatus(prev => ({ ...prev, visible: false }));\n      }, 5000);\n    }\n  }, [user, initialized, syncStatus.lastSync]);\n\n  // Monitorear el estado de la conexión\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      // Intentar sincronizar cuando vuelve a estar en línea\n      if (user && initialized) {\n        syncData();\n      }\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setSyncStatus({\n        visible: true,\n        status: 'warning',\n        title: 'Sin conexión',\n        message: 'Trabajando en modo offline',\n        lastSync: syncStatus.lastSync\n      });\n\n      // Ocultar después de 3 segundos\n      setTimeout(() => {\n        setSyncStatus(prev => ({ ...prev, visible: false }));\n      }, 3000);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [user, initialized, syncData, syncStatus.lastSync]);\n\n  // Inicializar la aplicación\n  useEffect(() => {\n    const initApp = async () => {\n      if (initializing || initialized) return;\n\n      setInitializing(true);\n\n      try {\n        console.log('Inicializando la aplicación...');\n\n        // Inicializar la base de datos IndexedDB\n        await initDatabase();\n        console.log('Base de datos IndexedDB inicializada');\n\n        // Inicializar el servicio de sincronización\n        const syncService = initSyncService({\n          showNotifications: false, // Usamos nuestras propias notificaciones\n          interval: 60000 // 1 minuto\n        });\n        console.log('Servicio de sincronización inicializado');\n\n        // Registrar el service worker\n        await registerServiceWorker();\n        console.log('Service worker registrado');\n\n        // Verificar notificaciones programadas pendientes\n        checkScheduledNotifications();\n        console.log('Notificaciones verificadas');\n\n        // Guardar el servicio de sincronización en window para acceso global\n        window.syncService = syncService;\n\n        // Configurar callback para sincronización\n        syncService.onSync = (result) => {\n          if (result.success) {\n            setSyncStatus({\n              visible: true,\n              status: 'success',\n              title: 'Sincronización automática',\n              message: `${result.succeeded} almacenes sincronizados`,\n              lastSync: new Date()\n            });\n\n            // Ocultar después de 3 segundos\n            setTimeout(() => {\n              setSyncStatus(prev => ({ ...prev, visible: false }));\n            }, 3000);\n          }\n        };\n\n        setInitialized(true);\n        console.log('Aplicación inicializada correctamente');\n      } catch (error) {\n        console.error('Error al inicializar la aplicación:', error);\n        showError('Error al inicializar la aplicación');\n      } finally {\n        setInitializing(false);\n      }\n    };\n\n    initApp();\n\n    // Limpiar al desmontar\n    return () => {\n      if (window.syncService) {\n        window.syncService.stopSync();\n      }\n    };\n  }, [initializing, initialized]);\n\n  // Sincronizar datos del usuario cuando inicia sesión\n  useEffect(() => {\n    if (user && initialized && isOnline) {\n      syncData();\n    }\n  }, [user, initialized, isOnline, syncData]);\n\n  // Formatear fecha\n  const formatDate = (date) => {\n    if (!date) return 'Nunca';\n\n    return new Date(date).toLocaleString('es-AR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Renderizar icono según el estado\n  const renderIcon = () => {\n    switch (syncStatus.status) {\n      case 'syncing':\n        return <FiRefreshCw size={18} />;\n      case 'success':\n        return <FiCheck size={18} />;\n      case 'warning':\n        return <FiAlertTriangle size={18} />;\n      case 'error':\n        return <FiAlertTriangle size={18} />;\n      default:\n        return isOnline ? <FiWifi size={18} /> : <FiWifiOff size={18} />;\n    }\n  };\n\n  // Determinar la clase CSS según el estado\n  const getContainerClass = () => {\n    if (!syncStatus.visible) return 'hidden';\n\n    switch (syncStatus.status) {\n      case 'success':\n        return 'success';\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <SyncContainer className={getContainerClass()}>\n      {renderIcon()}\n\n      <SyncStatus>\n        <div className=\"sync-title\">{syncStatus.title}</div>\n        <div className=\"sync-message\">\n          {syncStatus.message}\n          {syncStatus.lastSync && ` • Última: ${formatDate(syncStatus.lastSync)}`}\n        </div>\n      </SyncStatus>\n\n      <SyncButton\n        onClick={() => syncData(true)}\n        disabled={syncStatus.status === 'syncing' || !isOnline}\n        spinning={syncStatus.status === 'syncing'}\n        title=\"Forzar sincronización\"\n        aria-label=\"Forzar sincronización\"\n      >\n        <FiRefreshCw size={16} />\n      </SyncButton>\n    </SyncContainer>\n  );\n};\n\nexport default AppInitializer;\n","/**\n * Servicio para gestionar las notificaciones push\n */\n\n// Verificar si el navegador soporta notificaciones\nconst isNotificationSupported = () => {\n  return 'Notification' in window;\n};\n\n// Verificar si el servicio de trabajadores está disponible\nconst isServiceWorkerSupported = () => {\n  return 'serviceWorker' in navigator;\n};\n\n/**\n * Solicitar permiso para mostrar notificaciones\n * @returns {Promise<string>} - Estado del permiso ('granted', 'denied', 'default')\n */\nexport const requestNotificationPermission = async () => {\n  if (!isNotificationSupported()) {\n    console.warn('Las notificaciones no son soportadas en este navegador');\n    return 'not-supported';\n  }\n  \n  try {\n    const permission = await Notification.requestPermission();\n    return permission;\n  } catch (error) {\n    console.error('Error al solicitar permiso para notificaciones:', error);\n    return 'error';\n  }\n};\n\n/**\n * Verificar el estado actual del permiso de notificaciones\n * @returns {string} - Estado del permiso ('granted', 'denied', 'default', 'not-supported')\n */\nexport const getNotificationPermissionStatus = () => {\n  if (!isNotificationSupported()) {\n    return 'not-supported';\n  }\n  \n  return Notification.permission;\n};\n\n/**\n * Registrar el service worker para notificaciones push\n * @returns {Promise<ServiceWorkerRegistration|null>} - Registro del service worker\n */\nexport const registerServiceWorker = async () => {\n  if (!isServiceWorkerSupported()) {\n    console.warn('Service Worker no es soportado en este navegador');\n    return null;\n  }\n  \n  try {\n    const registration = await navigator.serviceWorker.register('/service-worker.js');\n    console.log('Service Worker registrado con éxito:', registration);\n    return registration;\n  } catch (error) {\n    console.error('Error al registrar el Service Worker:', error);\n    return null;\n  }\n};\n\n/**\n * Mostrar una notificación local (no push)\n * @param {string} title - Título de la notificación\n * @param {Object} options - Opciones de la notificación\n * @param {string} options.body - Cuerpo de la notificación\n * @param {string} options.icon - URL del icono\n * @param {string} options.tag - Etiqueta para agrupar notificaciones\n * @param {Object} options.data - Datos adicionales\n * @param {Array} options.actions - Acciones disponibles\n * @returns {Promise<Notification|null>} - Objeto de notificación\n */\nexport const showLocalNotification = async (title, options = {}) => {\n  if (getNotificationPermissionStatus() !== 'granted') {\n    console.warn('No se tiene permiso para mostrar notificaciones');\n    return null;\n  }\n  \n  try {\n    // Si hay un service worker activo, usar el service worker para mostrar la notificación\n    if (isServiceWorkerSupported() && navigator.serviceWorker.controller) {\n      const registration = await navigator.serviceWorker.ready;\n      await registration.showNotification(title, options);\n      return true;\n    } else {\n      // Si no hay service worker, mostrar una notificación normal\n      const notification = new Notification(title, options);\n      return notification;\n    }\n  } catch (error) {\n    console.error('Error al mostrar notificación:', error);\n    return null;\n  }\n};\n\n/**\n * Programar una notificación para una fecha futura\n * @param {string} title - Título de la notificación\n * @param {Object} options - Opciones de la notificación\n * @param {Date} scheduledTime - Fecha y hora programada\n * @returns {Promise<Object|null>} - Información de la notificación programada\n */\nexport const scheduleNotification = async (title, options = {}, scheduledTime) => {\n  if (getNotificationPermissionStatus() !== 'granted') {\n    console.warn('No se tiene permiso para mostrar notificaciones');\n    return null;\n  }\n  \n  try {\n    // Calcular el tiempo de espera en milisegundos\n    const now = new Date();\n    const delay = scheduledTime.getTime() - now.getTime();\n    \n    if (delay <= 0) {\n      console.warn('La fecha programada ya ha pasado');\n      return null;\n    }\n    \n    // Guardar la notificación programada en localStorage\n    const notificationId = `notification_${Date.now()}`;\n    const scheduledNotification = {\n      id: notificationId,\n      title,\n      options,\n      scheduledTime: scheduledTime.toISOString(),\n    };\n    \n    // Obtener notificaciones programadas existentes\n    const scheduledNotifications = getScheduledNotifications();\n    scheduledNotifications.push(scheduledNotification);\n    \n    // Guardar en localStorage\n    localStorage.setItem('scheduledNotifications', JSON.stringify(scheduledNotifications));\n    \n    // Programar la notificación con setTimeout\n    setTimeout(() => {\n      showLocalNotification(title, options);\n      removeScheduledNotification(notificationId);\n    }, delay);\n    \n    return scheduledNotification;\n  } catch (error) {\n    console.error('Error al programar notificación:', error);\n    return null;\n  }\n};\n\n/**\n * Obtener todas las notificaciones programadas\n * @returns {Array} - Lista de notificaciones programadas\n */\nexport const getScheduledNotifications = () => {\n  try {\n    const scheduledNotifications = localStorage.getItem('scheduledNotifications');\n    return scheduledNotifications ? JSON.parse(scheduledNotifications) : [];\n  } catch (error) {\n    console.error('Error al obtener notificaciones programadas:', error);\n    return [];\n  }\n};\n\n/**\n * Eliminar una notificación programada\n * @param {string} notificationId - ID de la notificación\n * @returns {boolean} - true si se eliminó correctamente\n */\nexport const removeScheduledNotification = (notificationId) => {\n  try {\n    const scheduledNotifications = getScheduledNotifications();\n    const updatedNotifications = scheduledNotifications.filter(\n      notification => notification.id !== notificationId\n    );\n    \n    localStorage.setItem('scheduledNotifications', JSON.stringify(updatedNotifications));\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar notificación programada:', error);\n    return false;\n  }\n};\n\n/**\n * Verificar y mostrar notificaciones programadas pendientes\n * (Llamar a esta función al iniciar la aplicación)\n */\nexport const checkScheduledNotifications = () => {\n  try {\n    const scheduledNotifications = getScheduledNotifications();\n    const now = new Date();\n    \n    scheduledNotifications.forEach(notification => {\n      const scheduledTime = new Date(notification.scheduledTime);\n      const delay = scheduledTime.getTime() - now.getTime();\n      \n      if (delay <= 0) {\n        // La notificación ya debería haberse mostrado, mostrarla ahora\n        showLocalNotification(notification.title, notification.options);\n        removeScheduledNotification(notification.id);\n      } else {\n        // Reprogramar la notificación\n        setTimeout(() => {\n          showLocalNotification(notification.title, notification.options);\n          removeScheduledNotification(notification.id);\n        }, delay);\n      }\n    });\n  } catch (error) {\n    console.error('Error al verificar notificaciones programadas:', error);\n  }\n};\n"],"names":["SyncContainer","styled","div","SyncButton","button","props","spinning","SyncStatus","AppInitializer","user","useAuth","initializing","setInitializing","useState","initialized","setInitialized","syncStatus","setSyncStatus","visible","status","title","message","lastSync","isOnline","setIsOnline","checkOnlineStatus","syncData","useCallback","async","force","arguments","length","undefined","setTimeout","prev","result","syncAllUserData","id","success","console","log","succeeded","Date","warn","failed","error","useEffect","handleOnline","handleOffline","window","addEventListener","removeEventListener","initDatabase","syncService","initSyncService","showNotifications","interval","registerServiceWorker","checkScheduledNotifications","onSync","showError","initApp","stopSync","_jsxs","className","getContainerClass","children","renderIcon","_jsx","FiRefreshCw","size","FiCheck","FiAlertTriangle","FiWifi","FiWifiOff","date","toLocaleString","day","month","year","hour","minute","onClick","disabled","isNotificationSupported","isServiceWorkerSupported","navigator","requestNotificationPermission","Notification","requestPermission","getNotificationPermissionStatus","permission","registration","serviceWorker","register","showLocalNotification","options","controller","ready","showNotification","getScheduledNotifications","scheduledNotifications","localStorage","getItem","JSON","parse","removeScheduledNotification","notificationId","updatedNotifications","filter","notification","setItem","stringify","now","forEach","delay","scheduledTime","getTime"],"sourceRoot":""}