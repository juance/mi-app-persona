{"version":3,"file":"static/js/962.34644a92.chunk.js","mappings":"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","sources":["components/common/AppInitializer.js","services/notificationService.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { initDatabase } from '../../services/offlineStorage';\nimport { initSyncService, syncAllUserData } from '../../services/syncService';\nimport { registerServiceWorker, checkScheduledNotifications } from '../../services/notificationService';\nimport { showInfo, showError } from './Notification';\nimport styled from 'styled-components';\n\n// Estilos para el indicador de inicialización\nconst InitializerContainer = styled.div`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 8px 16px;\n  border-radius: 20px;\n  font-size: 0.9rem;\n  z-index: 1000;\n  display: ${props => props.visible ? 'block' : 'none'};\n  animation: fadeOut 0.5s 3s forwards;\n  \n  @keyframes fadeOut {\n    from { opacity: 1; }\n    to { opacity: 0; }\n  }\n`;\n\n/**\n * Componente para inicializar la aplicación\n * @returns {JSX.Element} - Componente de inicialización\n */\nconst AppInitializer = () => {\n  const { user } = useAuth();\n  const [initializing, setInitializing] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n  \n  // Inicializar la aplicación\n  useEffect(() => {\n    const initApp = async () => {\n      if (initializing || initialized) return;\n      \n      setInitializing(true);\n      \n      try {\n        console.log('Inicializando la aplicación...');\n        \n        // Inicializar la base de datos IndexedDB\n        await initDatabase();\n        console.log('Base de datos IndexedDB inicializada');\n        \n        // Inicializar el servicio de sincronización\n        const syncService = initSyncService({\n          showNotifications: true,\n          interval: 30000 // 30 segundos\n        });\n        console.log('Servicio de sincronización inicializado');\n        \n        // Registrar el service worker\n        await registerServiceWorker();\n        console.log('Service worker registrado');\n        \n        // Verificar notificaciones programadas pendientes\n        checkScheduledNotifications();\n        console.log('Notificaciones verificadas');\n        \n        // Guardar el servicio de sincronización en window para acceso global\n        window.syncService = syncService;\n        \n        setInitialized(true);\n        console.log('Aplicación inicializada correctamente');\n      } catch (error) {\n        console.error('Error al inicializar la aplicación:', error);\n        showError('Error al inicializar la aplicación');\n      } finally {\n        setInitializing(false);\n      }\n    };\n    \n    initApp();\n    \n    // Limpiar al desmontar\n    return () => {\n      if (window.syncService) {\n        window.syncService.stopSync();\n      }\n    };\n  }, [initializing, initialized]);\n  \n  // Sincronizar datos del usuario cuando inicia sesión\n  useEffect(() => {\n    const syncUserData = async () => {\n      if (!user || !initialized) return;\n      \n      try {\n        console.log('Sincronizando datos del usuario...');\n        showInfo('Sincronizando datos...');\n        \n        // Sincronizar todos los datos del usuario\n        const result = await syncAllUserData(user.id);\n        \n        if (result.success) {\n          console.log('Datos sincronizados correctamente:', result);\n          showInfo('Datos sincronizados correctamente');\n        } else {\n          console.warn('Advertencia al sincronizar datos:', result);\n          showInfo('Algunos datos no pudieron sincronizarse');\n        }\n      } catch (error) {\n        console.error('Error al sincronizar datos del usuario:', error);\n        showError('Error al sincronizar datos');\n      }\n    };\n    \n    syncUserData();\n  }, [user, initialized]);\n  \n  return (\n    <InitializerContainer visible={initializing}>\n      Inicializando aplicación...\n    </InitializerContainer>\n  );\n};\n\nexport default AppInitializer;\n","/**\n * Servicio para gestionar las notificaciones push\n */\n\n// Verificar si el navegador soporta notificaciones\nconst isNotificationSupported = () => {\n  return 'Notification' in window;\n};\n\n// Verificar si el servicio de trabajadores está disponible\nconst isServiceWorkerSupported = () => {\n  return 'serviceWorker' in navigator;\n};\n\n/**\n * Solicitar permiso para mostrar notificaciones\n * @returns {Promise<string>} - Estado del permiso ('granted', 'denied', 'default')\n */\nexport const requestNotificationPermission = async () => {\n  if (!isNotificationSupported()) {\n    console.warn('Las notificaciones no son soportadas en este navegador');\n    return 'not-supported';\n  }\n  \n  try {\n    const permission = await Notification.requestPermission();\n    return permission;\n  } catch (error) {\n    console.error('Error al solicitar permiso para notificaciones:', error);\n    return 'error';\n  }\n};\n\n/**\n * Verificar el estado actual del permiso de notificaciones\n * @returns {string} - Estado del permiso ('granted', 'denied', 'default', 'not-supported')\n */\nexport const getNotificationPermissionStatus = () => {\n  if (!isNotificationSupported()) {\n    return 'not-supported';\n  }\n  \n  return Notification.permission;\n};\n\n/**\n * Registrar el service worker para notificaciones push\n * @returns {Promise<ServiceWorkerRegistration|null>} - Registro del service worker\n */\nexport const registerServiceWorker = async () => {\n  if (!isServiceWorkerSupported()) {\n    console.warn('Service Worker no es soportado en este navegador');\n    return null;\n  }\n  \n  try {\n    const registration = await navigator.serviceWorker.register('/service-worker.js');\n    console.log('Service Worker registrado con éxito:', registration);\n    return registration;\n  } catch (error) {\n    console.error('Error al registrar el Service Worker:', error);\n    return null;\n  }\n};\n\n/**\n * Mostrar una notificación local (no push)\n * @param {string} title - Título de la notificación\n * @param {Object} options - Opciones de la notificación\n * @param {string} options.body - Cuerpo de la notificación\n * @param {string} options.icon - URL del icono\n * @param {string} options.tag - Etiqueta para agrupar notificaciones\n * @param {Object} options.data - Datos adicionales\n * @param {Array} options.actions - Acciones disponibles\n * @returns {Promise<Notification|null>} - Objeto de notificación\n */\nexport const showLocalNotification = async (title, options = {}) => {\n  if (getNotificationPermissionStatus() !== 'granted') {\n    console.warn('No se tiene permiso para mostrar notificaciones');\n    return null;\n  }\n  \n  try {\n    // Si hay un service worker activo, usar el service worker para mostrar la notificación\n    if (isServiceWorkerSupported() && navigator.serviceWorker.controller) {\n      const registration = await navigator.serviceWorker.ready;\n      await registration.showNotification(title, options);\n      return true;\n    } else {\n      // Si no hay service worker, mostrar una notificación normal\n      const notification = new Notification(title, options);\n      return notification;\n    }\n  } catch (error) {\n    console.error('Error al mostrar notificación:', error);\n    return null;\n  }\n};\n\n/**\n * Programar una notificación para una fecha futura\n * @param {string} title - Título de la notificación\n * @param {Object} options - Opciones de la notificación\n * @param {Date} scheduledTime - Fecha y hora programada\n * @returns {Promise<Object|null>} - Información de la notificación programada\n */\nexport const scheduleNotification = async (title, options = {}, scheduledTime) => {\n  if (getNotificationPermissionStatus() !== 'granted') {\n    console.warn('No se tiene permiso para mostrar notificaciones');\n    return null;\n  }\n  \n  try {\n    // Calcular el tiempo de espera en milisegundos\n    const now = new Date();\n    const delay = scheduledTime.getTime() - now.getTime();\n    \n    if (delay <= 0) {\n      console.warn('La fecha programada ya ha pasado');\n      return null;\n    }\n    \n    // Guardar la notificación programada en localStorage\n    const notificationId = `notification_${Date.now()}`;\n    const scheduledNotification = {\n      id: notificationId,\n      title,\n      options,\n      scheduledTime: scheduledTime.toISOString(),\n    };\n    \n    // Obtener notificaciones programadas existentes\n    const scheduledNotifications = getScheduledNotifications();\n    scheduledNotifications.push(scheduledNotification);\n    \n    // Guardar en localStorage\n    localStorage.setItem('scheduledNotifications', JSON.stringify(scheduledNotifications));\n    \n    // Programar la notificación con setTimeout\n    setTimeout(() => {\n      showLocalNotification(title, options);\n      removeScheduledNotification(notificationId);\n    }, delay);\n    \n    return scheduledNotification;\n  } catch (error) {\n    console.error('Error al programar notificación:', error);\n    return null;\n  }\n};\n\n/**\n * Obtener todas las notificaciones programadas\n * @returns {Array} - Lista de notificaciones programadas\n */\nexport const getScheduledNotifications = () => {\n  try {\n    const scheduledNotifications = localStorage.getItem('scheduledNotifications');\n    return scheduledNotifications ? JSON.parse(scheduledNotifications) : [];\n  } catch (error) {\n    console.error('Error al obtener notificaciones programadas:', error);\n    return [];\n  }\n};\n\n/**\n * Eliminar una notificación programada\n * @param {string} notificationId - ID de la notificación\n * @returns {boolean} - true si se eliminó correctamente\n */\nexport const removeScheduledNotification = (notificationId) => {\n  try {\n    const scheduledNotifications = getScheduledNotifications();\n    const updatedNotifications = scheduledNotifications.filter(\n      notification => notification.id !== notificationId\n    );\n    \n    localStorage.setItem('scheduledNotifications', JSON.stringify(updatedNotifications));\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar notificación programada:', error);\n    return false;\n  }\n};\n\n/**\n * Verificar y mostrar notificaciones programadas pendientes\n * (Llamar a esta función al iniciar la aplicación)\n */\nexport const checkScheduledNotifications = () => {\n  try {\n    const scheduledNotifications = getScheduledNotifications();\n    const now = new Date();\n    \n    scheduledNotifications.forEach(notification => {\n      const scheduledTime = new Date(notification.scheduledTime);\n      const delay = scheduledTime.getTime() - now.getTime();\n      \n      if (delay <= 0) {\n        // La notificación ya debería haberse mostrado, mostrarla ahora\n        showLocalNotification(notification.title, notification.options);\n        removeScheduledNotification(notification.id);\n      } else {\n        // Reprogramar la notificación\n        setTimeout(() => {\n          showLocalNotification(notification.title, notification.options);\n          removeScheduledNotification(notification.id);\n        }, delay);\n      }\n    });\n  } catch (error) {\n    console.error('Error al verificar notificaciones programadas:', error);\n  }\n};\n"],"names":["InitializerContainer","styled","div","props","visible","AppInitializer","user","useAuth","initializing","setInitializing","useState","initialized","setInitialized","useEffect","async","console","log","initDatabase","syncService","initSyncService","showNotifications","interval","registerServiceWorker","checkScheduledNotifications","window","error","showError","initApp","stopSync","showInfo","result","syncAllUserData","id","success","warn","syncUserData","_jsx","children","isNotificationSupported","isServiceWorkerSupported","navigator","requestNotificationPermission","Notification","requestPermission","getNotificationPermissionStatus","permission","registration","serviceWorker","register","showLocalNotification","title","options","arguments","length","undefined","controller","ready","showNotification","getScheduledNotifications","scheduledNotifications","localStorage","getItem","JSON","parse","removeScheduledNotification","notificationId","updatedNotifications","filter","notification","setItem","stringify","now","Date","forEach","delay","scheduledTime","getTime","setTimeout"],"sourceRoot":""}