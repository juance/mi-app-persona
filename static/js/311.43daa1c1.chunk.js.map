{"version":3,"file":"static/js/311.43daa1c1.chunk.js","mappings":"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","sources":["components/Analytics/FinancialAnalytics.js","services/predictiveAnalysisService.js","components/Analytics/PredictiveAnalytics.js","services/calendarService.js","services/recommendationService.js","services/financialGoalService.js","services/taskService.js","components/Analytics/PersonalizedRecommendations.js","components/Analytics/ExchangeRateHistory.js","pages/Analytics.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  RadialLinearScale,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js';\nimport { Line, Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\nimport { FiBarChart2, FiPieChart, FiTrendingUp } from 'react-icons/fi';\nimport { getTransactions } from '../../services/transactionService';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport AnimatedButton from '../common/AnimatedButton';\nimport { showError } from '../common/Notification';\n\n// Registrar componentes de Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  RadialLinearScale,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\n// Estilos\nconst AnalyticsContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: var(--border-radius);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  padding: 24px;\n  margin-bottom: 32px;\n  color: #ffffff;\n`;\n\nconst AnalyticsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n  }\n`;\n\nconst AnalyticsTitle = styled.h2`\n  margin: 0;\n  color: #ffffff;\n  font-size: 1.5rem;\n  font-weight: 600;\n  position: relative;\n  padding-left: 16px;\n\n  &::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 4px;\n    height: 24px;\n    background: linear-gradient(to bottom, var(--primary-color), var(--secondary-color));\n    border-radius: 2px;\n  }\n`;\n\nconst ChartTypeSelector = styled.div`\n  display: flex;\n  gap: 8px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    overflow-x: auto;\n    padding-bottom: 8px;\n  }\n`;\n\nconst ChartContainer = styled.div`\n  height: 400px;\n  position: relative;\n  margin-top: 24px;\n`;\n\nconst FiltersContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  margin-bottom: 24px;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst FilterGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  label {\n    font-size: 0.9rem;\n    color: #b0b0b0;\n  }\n\n  select, input {\n    padding: 8px 12px;\n    border-radius: var(--border-radius);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    background-color: #2a2a2a;\n    color: #ffffff;\n    font-size: 0.9rem;\n\n    &:focus {\n      outline: none;\n      border-color: var(--primary-color);\n      box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb), 0.2);\n    }\n\n    option {\n      background-color: #2a2a2a;\n      color: #ffffff;\n    }\n  }\n`;\n\nconst InsightsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 16px;\n  margin-top: 24px;\n`;\n\nconst InsightCard = styled.div`\n  background-color: #2a2a2a;\n  border-radius: var(--border-radius);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  padding: 16px;\n  border-left: 4px solid ${props => props.color || 'var(--primary-color)'};\n\n  h3 {\n    margin: 0 0 8px 0;\n    font-size: 1rem;\n    color: #ffffff;\n  }\n\n  p {\n    margin: 0;\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: ${props => props.color || 'var(--primary-color)'};\n  }\n\n  small {\n    display: block;\n    margin-top: 8px;\n    font-size: 0.8rem;\n    color: #b0b0b0;\n  }\n`;\n\n// Opciones de gráficos\nconst chartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: 'top',\n      labels: {\n        color: '#ffffff'\n      }\n    },\n    tooltip: {\n      mode: 'index',\n      intersect: false,\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      titleColor: '#ffffff',\n      bodyColor: '#ffffff',\n      borderColor: 'rgba(255, 255, 255, 0.2)',\n      borderWidth: 1\n    },\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n      grid: {\n        color: 'rgba(255, 255, 255, 0.1)'\n      },\n      ticks: {\n        color: '#b0b0b0'\n      }\n    },\n    x: {\n      grid: {\n        color: 'rgba(255, 255, 255, 0.1)'\n      },\n      ticks: {\n        color: '#b0b0b0'\n      }\n    }\n  },\n};\n\n/**\n * Componente de análisis financiero\n * @returns {JSX.Element} - Componente de análisis financiero\n */\nconst FinancialAnalytics = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [chartType, setChartType] = useState('line');\n  const [timeFrame, setTimeFrame] = useState('month');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n\n  // Cargar transacciones\n  useEffect(() => {\n    const loadTransactions = async () => {\n      try {\n        setLoading(true);\n        const data = await getTransactions();\n        setTransactions(data);\n      } catch (error) {\n        console.error('Error al cargar las transacciones:', error);\n        showError('Error al cargar los datos para el análisis');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTransactions();\n  }, []);\n\n  // Filtrar transacciones\n  const filteredTransactions = useMemo(() => {\n    let result = [...transactions];\n\n    // Filtrar por categoría\n    if (categoryFilter !== 'all') {\n      result = result.filter(transaction => transaction.category === categoryFilter);\n    }\n\n    // Filtrar por fecha de inicio\n    if (startDate) {\n      result = result.filter(transaction => transaction.date >= startDate);\n    }\n\n    // Filtrar por fecha de fin\n    if (endDate) {\n      result = result.filter(transaction => transaction.date <= endDate);\n    }\n\n    return result;\n  }, [transactions, categoryFilter, startDate, endDate]);\n\n  // Obtener categorías únicas\n  const categories = useMemo(() => {\n    const uniqueCategories = new Set();\n    transactions.forEach(transaction => {\n      if (transaction.category) {\n        uniqueCategories.add(transaction.category);\n      }\n    });\n    return Array.from(uniqueCategories);\n  }, [transactions]);\n\n  // Preparar datos para gráficos\n  const chartData = useMemo(() => {\n    // Agrupar transacciones por período\n    const groupedData = {};\n\n    // Determinar el formato de fecha según el período\n    const getDateKey = (date) => {\n      const dateObj = new Date(date);\n      switch (timeFrame) {\n        case 'day':\n          return date;\n        case 'week':\n          const weekStart = new Date(dateObj);\n          weekStart.setDate(dateObj.getDate() - dateObj.getDay());\n          return weekStart.toISOString().split('T')[0];\n        case 'month':\n          return `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}`;\n        case 'year':\n          return `${dateObj.getFullYear()}`;\n        default:\n          return date;\n      }\n    };\n\n    // Agrupar transacciones por período y tipo\n    filteredTransactions.forEach(transaction => {\n      const dateKey = getDateKey(transaction.date);\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = { income: 0, expense: 0 };\n      }\n\n      if (transaction.type === 'income') {\n        groupedData[dateKey].income += transaction.amount;\n      } else if (transaction.type === 'expense') {\n        groupedData[dateKey].expense += transaction.amount;\n      }\n    });\n\n    // Ordenar las fechas\n    const sortedDates = Object.keys(groupedData).sort();\n\n    // Preparar datos para el gráfico\n    const labels = sortedDates.map(date => {\n      if (timeFrame === 'month') {\n        const [year, month] = date.split('-');\n        return `${month}/${year}`;\n      }\n      return date;\n    });\n\n    const incomeData = sortedDates.map(date => groupedData[date].income);\n    const expenseData = sortedDates.map(date => groupedData[date].expense);\n    const balanceData = sortedDates.map(date => groupedData[date].income - groupedData[date].expense);\n\n    // Datos para gráficos de categorías\n    const categoryData = {};\n    filteredTransactions.forEach(transaction => {\n      if (!transaction.category) return;\n\n      if (!categoryData[transaction.category]) {\n        categoryData[transaction.category] = { income: 0, expense: 0 };\n      }\n\n      if (transaction.type === 'income') {\n        categoryData[transaction.category].income += transaction.amount;\n      } else if (transaction.type === 'expense') {\n        categoryData[transaction.category].expense += transaction.amount;\n      }\n    });\n\n    const categoryLabels = Object.keys(categoryData);\n    const categoryIncomeData = categoryLabels.map(category => categoryData[category].income);\n    const categoryExpenseData = categoryLabels.map(category => categoryData[category].expense);\n\n    // Colores para los gráficos\n    const incomeColor = 'rgba(75, 192, 192, 0.6)';\n    const expenseColor = 'rgba(255, 99, 132, 0.6)';\n    const balanceColor = 'rgba(153, 102, 255, 0.6)';\n\n    // Generar colores aleatorios para categorías\n    const generateColors = (count) => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = (i * 137) % 360; // Distribución uniforme de colores\n        colors.push(`hsla(${hue}, 70%, 60%, 0.7)`);\n      }\n      return colors;\n    };\n\n    const categoryColors = generateColors(categoryLabels.length);\n\n    return {\n      timeSeries: {\n        labels,\n        datasets: [\n          {\n            label: 'Ingresos',\n            data: incomeData,\n            borderColor: incomeColor,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            fill: chartType === 'area',\n            tension: 0.4,\n          },\n          {\n            label: 'Gastos',\n            data: expenseData,\n            borderColor: expenseColor,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            fill: chartType === 'area',\n            tension: 0.4,\n          },\n          {\n            label: 'Balance',\n            data: balanceData,\n            borderColor: balanceColor,\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            fill: chartType === 'area',\n            tension: 0.4,\n          },\n        ],\n      },\n      categoryIncome: {\n        labels: categoryLabels,\n        datasets: [\n          {\n            label: 'Ingresos por categoría',\n            data: categoryIncomeData,\n            backgroundColor: categoryColors,\n            borderColor: categoryColors.map(color => color.replace('0.7', '1')),\n            borderWidth: 1,\n          },\n        ],\n      },\n      categoryExpense: {\n        labels: categoryLabels,\n        datasets: [\n          {\n            label: 'Gastos por categoría',\n            data: categoryExpenseData,\n            backgroundColor: categoryColors,\n            borderColor: categoryColors.map(color => color.replace('0.7', '1')),\n            borderWidth: 1,\n          },\n        ],\n      },\n    };\n  }, [filteredTransactions, timeFrame]);\n\n  // Calcular estadísticas\n  const statistics = useMemo(() => {\n    if (filteredTransactions.length === 0) {\n      return {\n        totalIncome: 0,\n        totalExpense: 0,\n        balance: 0,\n        averageIncome: 0,\n        averageExpense: 0,\n        largestIncome: 0,\n        largestExpense: 0,\n      };\n    }\n\n    const incomeTransactions = filteredTransactions.filter(t => t.type === 'income');\n    const expenseTransactions = filteredTransactions.filter(t => t.type === 'expense');\n\n    const totalIncome = incomeTransactions.reduce((sum, t) => sum + t.amount, 0);\n    const totalExpense = expenseTransactions.reduce((sum, t) => sum + t.amount, 0);\n\n    return {\n      totalIncome,\n      totalExpense,\n      balance: totalIncome - totalExpense,\n      averageIncome: incomeTransactions.length > 0 ? totalIncome / incomeTransactions.length : 0,\n      averageExpense: expenseTransactions.length > 0 ? totalExpense / expenseTransactions.length : 0,\n      largestIncome: incomeTransactions.length > 0 ? Math.max(...incomeTransactions.map(t => t.amount)) : 0,\n      largestExpense: expenseTransactions.length > 0 ? Math.max(...expenseTransactions.map(t => t.amount)) : 0,\n    };\n  }, [filteredTransactions]);\n\n  // Formatear moneda\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('es-AR', {\n      style: 'currency',\n      currency: 'ARS',\n    }).format(amount);\n  };\n\n  // Renderizar gráfico según el tipo seleccionado\n  const renderChart = () => {\n    switch (chartType) {\n      case 'line':\n        return <Line data={chartData.timeSeries} options={chartOptions} />;\n      case 'bar':\n        return <Bar data={chartData.timeSeries} options={chartOptions} />;\n      case 'area':\n        return <Line data={chartData.timeSeries} options={chartOptions} />;\n      case 'pie-income':\n        return <Pie data={chartData.categoryIncome} options={{ ...chartOptions, aspectRatio: 1 }} />;\n      case 'pie-expense':\n        return <Pie data={chartData.categoryExpense} options={{ ...chartOptions, aspectRatio: 1 }} />;\n      case 'doughnut-income':\n        return <Doughnut data={chartData.categoryIncome} options={{ ...chartOptions, aspectRatio: 1 }} />;\n      case 'doughnut-expense':\n        return <Doughnut data={chartData.categoryExpense} options={{ ...chartOptions, aspectRatio: 1 }} />;\n      case 'polar-income':\n        return <PolarArea data={chartData.categoryIncome} options={{ ...chartOptions, aspectRatio: 1 }} />;\n      case 'polar-expense':\n        return <PolarArea data={chartData.categoryExpense} options={{ ...chartOptions, aspectRatio: 1 }} />;\n      default:\n        return <Line data={chartData.timeSeries} options={chartOptions} />;\n    }\n  };\n\n  return (\n    <AnalyticsContainer>\n      <AnalyticsHeader>\n        <AnalyticsTitle>Análisis Financiero</AnalyticsTitle>\n        <ChartTypeSelector>\n          <AnimatedButton\n            variant={chartType === 'line' ? 'primary' : 'outline'}\n            onClick={() => setChartType('line')}\n            title=\"Gráfico de línea\"\n          >\n            <FiTrendingUp />\n          </AnimatedButton>\n          <AnimatedButton\n            variant={chartType === 'bar' ? 'primary' : 'outline'}\n            onClick={() => setChartType('bar')}\n            title=\"Gráfico de barras\"\n          >\n            <FiBarChart2 />\n          </AnimatedButton>\n          <AnimatedButton\n            variant={chartType === 'area' ? 'primary' : 'outline'}\n            onClick={() => setChartType('area')}\n            title=\"Gráfico de área\"\n          >\n            <FiTrendingUp />\n          </AnimatedButton>\n          <AnimatedButton\n            variant={chartType === 'pie-income' ? 'primary' : 'outline'}\n            onClick={() => setChartType('pie-income')}\n            title=\"Gráfico circular de ingresos\"\n          >\n            <FiPieChart />\n          </AnimatedButton>\n          <AnimatedButton\n            variant={chartType === 'pie-expense' ? 'primary' : 'outline'}\n            onClick={() => setChartType('pie-expense')}\n            title=\"Gráfico circular de gastos\"\n          >\n            <FiPieChart />\n          </AnimatedButton>\n        </ChartTypeSelector>\n      </AnalyticsHeader>\n\n      <FiltersContainer>\n        <FilterGroup>\n          <label htmlFor=\"timeFrame\">Período</label>\n          <select\n            id=\"timeFrame\"\n            value={timeFrame}\n            onChange={(e) => setTimeFrame(e.target.value)}\n          >\n            <option value=\"day\">Diario</option>\n            <option value=\"week\">Semanal</option>\n            <option value=\"month\">Mensual</option>\n            <option value=\"year\">Anual</option>\n          </select>\n        </FilterGroup>\n\n        <FilterGroup>\n          <label htmlFor=\"categoryFilter\">Categoría</label>\n          <select\n            id=\"categoryFilter\"\n            value={categoryFilter}\n            onChange={(e) => setCategoryFilter(e.target.value)}\n          >\n            <option value=\"all\">Todas las categorías</option>\n            {categories.map(category => (\n              <option key={category} value={category}>{category}</option>\n            ))}\n          </select>\n        </FilterGroup>\n\n        <FilterGroup>\n          <label htmlFor=\"startDate\">Fecha de inicio</label>\n          <input\n            id=\"startDate\"\n            type=\"date\"\n            value={startDate}\n            onChange={(e) => setStartDate(e.target.value)}\n          />\n        </FilterGroup>\n\n        <FilterGroup>\n          <label htmlFor=\"endDate\">Fecha de fin</label>\n          <input\n            id=\"endDate\"\n            type=\"date\"\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n          />\n        </FilterGroup>\n      </FiltersContainer>\n\n      {loading ? (\n        <LoadingSpinner text=\"Cargando datos para análisis...\" />\n      ) : (\n        <>\n          <ChartContainer>\n            {renderChart()}\n          </ChartContainer>\n\n          <InsightsContainer>\n            <InsightCard color=\"var(--success-color)\">\n              <h3>Ingresos totales</h3>\n              <p>{formatCurrency(statistics.totalIncome)}</p>\n              <small>Durante el período seleccionado</small>\n            </InsightCard>\n\n            <InsightCard color=\"var(--danger-color)\">\n              <h3>Gastos totales</h3>\n              <p>{formatCurrency(statistics.totalExpense)}</p>\n              <small>Durante el período seleccionado</small>\n            </InsightCard>\n\n            <InsightCard color={statistics.balance >= 0 ? \"var(--success-color)\" : \"var(--danger-color)\"}>\n              <h3>Balance</h3>\n              <p>{formatCurrency(statistics.balance)}</p>\n              <small>Ingresos - Gastos</small>\n            </InsightCard>\n\n            <InsightCard color=\"var(--primary-color)\">\n              <h3>Ingreso promedio</h3>\n              <p>{formatCurrency(statistics.averageIncome)}</p>\n              <small>Por transacción</small>\n            </InsightCard>\n\n            <InsightCard color=\"var(--secondary-color)\">\n              <h3>Gasto promedio</h3>\n              <p>{formatCurrency(statistics.averageExpense)}</p>\n              <small>Por transacción</small>\n            </InsightCard>\n\n            <InsightCard color=\"var(--success-color-dark)\">\n              <h3>Mayor ingreso</h3>\n              <p>{formatCurrency(statistics.largestIncome)}</p>\n              <small>Transacción más grande</small>\n            </InsightCard>\n\n            <InsightCard color=\"var(--danger-color-dark)\">\n              <h3>Mayor gasto</h3>\n              <p>{formatCurrency(statistics.largestExpense)}</p>\n              <small>Transacción más grande</small>\n            </InsightCard>\n          </InsightsContainer>\n        </>\n      )}\n    </AnalyticsContainer>\n  );\n};\n\nexport default FinancialAnalytics;\n","/**\n * Servicio para análisis predictivo de datos financieros\n */\n\nimport { getTransactions } from './transactionService';\nimport { getFromLocalStorage, saveToLocalStorage } from './offlineStorage';\n\n// Constantes\nconst PREDICTION_CACHE_KEY = 'financial_predictions';\nconst PREDICTION_CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 horas\n\n/**\n * Predecir gastos futuros basados en patrones históricos\n * @param {number} months - Número de meses a predecir\n * @returns {Promise<Array>} - Predicciones de gastos\n */\nexport const predictExpenses = async (months = 3) => {\n  try {\n    // Verificar si hay predicciones en caché\n    const cachedPredictions = getFromLocalStorage(PREDICTION_CACHE_KEY);\n    if (\n      cachedPredictions &&\n      cachedPredictions.expenses &&\n      cachedPredictions.timestamp &&\n      Date.now() - cachedPredictions.timestamp < PREDICTION_CACHE_DURATION\n    ) {\n      return cachedPredictions.expenses;\n    }\n\n    // Obtener transacciones\n    const transactions = await getTransactions();\n    \n    // Filtrar solo gastos\n    const expenses = transactions.filter(t => t.type === 'expense');\n    \n    if (expenses.length === 0) {\n      return [];\n    }\n    \n    // Agrupar gastos por mes\n    const expensesByMonth = groupTransactionsByMonth(expenses);\n    \n    // Calcular promedios por categoría\n    const categoryAverages = calculateCategoryAverages(expenses);\n    \n    // Calcular tendencias\n    const trends = calculateTrends(expensesByMonth);\n    \n    // Generar predicciones\n    const predictions = generatePredictions(categoryAverages, trends, months);\n    \n    // Guardar predicciones en caché\n    const predictionsCache = getFromLocalStorage(PREDICTION_CACHE_KEY) || {};\n    predictionsCache.expenses = predictions;\n    predictionsCache.timestamp = Date.now();\n    saveToLocalStorage(PREDICTION_CACHE_KEY, predictionsCache);\n    \n    return predictions;\n  } catch (error) {\n    console.error('Error al predecir gastos:', error);\n    return [];\n  }\n};\n\n/**\n * Predecir ingresos futuros basados en patrones históricos\n * @param {number} months - Número de meses a predecir\n * @returns {Promise<Array>} - Predicciones de ingresos\n */\nexport const predictIncome = async (months = 3) => {\n  try {\n    // Verificar si hay predicciones en caché\n    const cachedPredictions = getFromLocalStorage(PREDICTION_CACHE_KEY);\n    if (\n      cachedPredictions &&\n      cachedPredictions.income &&\n      cachedPredictions.timestamp &&\n      Date.now() - cachedPredictions.timestamp < PREDICTION_CACHE_DURATION\n    ) {\n      return cachedPredictions.income;\n    }\n\n    // Obtener transacciones\n    const transactions = await getTransactions();\n    \n    // Filtrar solo ingresos\n    const incomes = transactions.filter(t => t.type === 'income');\n    \n    if (incomes.length === 0) {\n      return [];\n    }\n    \n    // Agrupar ingresos por mes\n    const incomesByMonth = groupTransactionsByMonth(incomes);\n    \n    // Calcular promedios por categoría\n    const categoryAverages = calculateCategoryAverages(incomes);\n    \n    // Calcular tendencias\n    const trends = calculateTrends(incomesByMonth);\n    \n    // Generar predicciones\n    const predictions = generatePredictions(categoryAverages, trends, months);\n    \n    // Guardar predicciones en caché\n    const predictionsCache = getFromLocalStorage(PREDICTION_CACHE_KEY) || {};\n    predictionsCache.income = predictions;\n    predictionsCache.timestamp = Date.now();\n    saveToLocalStorage(PREDICTION_CACHE_KEY, predictionsCache);\n    \n    return predictions;\n  } catch (error) {\n    console.error('Error al predecir ingresos:', error);\n    return [];\n  }\n};\n\n/**\n * Predecir balance futuro basado en predicciones de ingresos y gastos\n * @param {number} months - Número de meses a predecir\n * @returns {Promise<Array>} - Predicciones de balance\n */\nexport const predictBalance = async (months = 3) => {\n  try {\n    // Verificar si hay predicciones en caché\n    const cachedPredictions = getFromLocalStorage(PREDICTION_CACHE_KEY);\n    if (\n      cachedPredictions &&\n      cachedPredictions.balance &&\n      cachedPredictions.timestamp &&\n      Date.now() - cachedPredictions.timestamp < PREDICTION_CACHE_DURATION\n    ) {\n      return cachedPredictions.balance;\n    }\n\n    // Obtener predicciones de ingresos y gastos\n    const incomePredictions = await predictIncome(months);\n    const expensePredictions = await predictExpenses(months);\n    \n    // Calcular balance para cada mes\n    const balancePredictions = [];\n    \n    for (let i = 0; i < months; i++) {\n      const monthIncome = incomePredictions.find(p => p.monthIndex === i) || { total: 0 };\n      const monthExpense = expensePredictions.find(p => p.monthIndex === i) || { total: 0 };\n      \n      balancePredictions.push({\n        monthIndex: i,\n        month: getMonthName(i),\n        income: monthIncome.total,\n        expense: monthExpense.total,\n        balance: monthIncome.total - monthExpense.total,\n        categories: {\n          income: monthIncome.categories || {},\n          expense: monthExpense.categories || {}\n        }\n      });\n    }\n    \n    // Guardar predicciones en caché\n    const predictionsCache = getFromLocalStorage(PREDICTION_CACHE_KEY) || {};\n    predictionsCache.balance = balancePredictions;\n    predictionsCache.timestamp = Date.now();\n    saveToLocalStorage(PREDICTION_CACHE_KEY, predictionsCache);\n    \n    return balancePredictions;\n  } catch (error) {\n    console.error('Error al predecir balance:', error);\n    return [];\n  }\n};\n\n/**\n * Agrupar transacciones por mes\n * @param {Array} transactions - Lista de transacciones\n * @returns {Object} - Transacciones agrupadas por mes\n */\nconst groupTransactionsByMonth = (transactions) => {\n  const grouped = {};\n  \n  transactions.forEach(transaction => {\n    const date = new Date(transaction.date);\n    const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n    \n    if (!grouped[monthKey]) {\n      grouped[monthKey] = [];\n    }\n    \n    grouped[monthKey].push(transaction);\n  });\n  \n  return grouped;\n};\n\n/**\n * Calcular promedios por categoría\n * @param {Array} transactions - Lista de transacciones\n * @returns {Object} - Promedios por categoría\n */\nconst calculateCategoryAverages = (transactions) => {\n  const categories = {};\n  const categoryCounts = {};\n  \n  transactions.forEach(transaction => {\n    const category = transaction.category || 'Sin categoría';\n    \n    if (!categories[category]) {\n      categories[category] = 0;\n      categoryCounts[category] = 0;\n    }\n    \n    categories[category] += transaction.amount;\n    categoryCounts[category]++;\n  });\n  \n  // Calcular promedios\n  const averages = {};\n  \n  Object.keys(categories).forEach(category => {\n    averages[category] = categories[category] / categoryCounts[category];\n  });\n  \n  return averages;\n};\n\n/**\n * Calcular tendencias basadas en datos históricos\n * @param {Object} transactionsByMonth - Transacciones agrupadas por mes\n * @returns {Object} - Tendencias por categoría\n */\nconst calculateTrends = (transactionsByMonth) => {\n  const months = Object.keys(transactionsByMonth).sort();\n  \n  if (months.length < 2) {\n    return { overall: 0, categories: {} };\n  }\n  \n  // Calcular totales por mes\n  const monthlyTotals = months.map(month => {\n    const transactions = transactionsByMonth[month];\n    const total = transactions.reduce((sum, t) => sum + t.amount, 0);\n    \n    // Calcular totales por categoría\n    const categoryTotals = {};\n    transactions.forEach(t => {\n      const category = t.category || 'Sin categoría';\n      categoryTotals[category] = (categoryTotals[category] || 0) + t.amount;\n    });\n    \n    return {\n      month,\n      total,\n      categoryTotals\n    };\n  });\n  \n  // Calcular tendencia general\n  const firstMonth = monthlyTotals[0];\n  const lastMonth = monthlyTotals[monthlyTotals.length - 1];\n  const monthCount = monthlyTotals.length;\n  \n  // Si solo hay datos de un mes, no hay tendencia\n  if (monthCount <= 1) {\n    return { overall: 0, categories: {} };\n  }\n  \n  // Calcular tendencia como porcentaje de cambio mensual promedio\n  const overallChange = lastMonth.total - firstMonth.total;\n  const overallTrend = overallChange / (monthCount - 1) / (firstMonth.total || 1);\n  \n  // Calcular tendencias por categoría\n  const categoryTrends = {};\n  \n  // Obtener todas las categorías únicas\n  const allCategories = new Set();\n  monthlyTotals.forEach(month => {\n    Object.keys(month.categoryTotals).forEach(category => {\n      allCategories.add(category);\n    });\n  });\n  \n  // Calcular tendencia para cada categoría\n  allCategories.forEach(category => {\n    const firstMonthWithCategory = monthlyTotals.find(m => m.categoryTotals[category]);\n    const lastMonthWithCategory = [...monthlyTotals].reverse().find(m => m.categoryTotals[category]);\n    \n    if (firstMonthWithCategory && lastMonthWithCategory) {\n      const firstValue = firstMonthWithCategory.categoryTotals[category] || 0;\n      const lastValue = lastMonthWithCategory.categoryTotals[category] || 0;\n      \n      // Calcular índices de los meses\n      const firstIndex = monthlyTotals.indexOf(firstMonthWithCategory);\n      const lastIndex = monthlyTotals.indexOf(lastMonthWithCategory);\n      const monthDiff = lastIndex - firstIndex;\n      \n      if (monthDiff > 0) {\n        const change = lastValue - firstValue;\n        const trend = change / monthDiff / (firstValue || 1);\n        categoryTrends[category] = trend;\n      } else {\n        categoryTrends[category] = 0;\n      }\n    } else {\n      categoryTrends[category] = 0;\n    }\n  });\n  \n  return {\n    overall: overallTrend,\n    categories: categoryTrends\n  };\n};\n\n/**\n * Generar predicciones basadas en promedios y tendencias\n * @param {Object} categoryAverages - Promedios por categoría\n * @param {Object} trends - Tendencias calculadas\n * @param {number} months - Número de meses a predecir\n * @returns {Array} - Predicciones\n */\nconst generatePredictions = (categoryAverages, trends, months) => {\n  const predictions = [];\n  \n  for (let i = 0; i < months; i++) {\n    const monthPrediction = {\n      monthIndex: i,\n      month: getMonthName(i),\n      total: 0,\n      categories: {}\n    };\n    \n    // Predecir valores por categoría\n    Object.keys(categoryAverages).forEach(category => {\n      const average = categoryAverages[category];\n      const trend = trends.categories[category] || 0;\n      \n      // Aplicar tendencia al promedio\n      const predictedValue = average * (1 + trend * (i + 1));\n      \n      monthPrediction.categories[category] = predictedValue;\n      monthPrediction.total += predictedValue;\n    });\n    \n    predictions.push(monthPrediction);\n  }\n  \n  return predictions;\n};\n\n/**\n * Obtener nombre del mes basado en el índice relativo al mes actual\n * @param {number} monthIndex - Índice del mes (0 = mes actual, 1 = próximo mes, etc.)\n * @returns {string} - Nombre del mes\n */\nconst getMonthName = (monthIndex) => {\n  const date = new Date();\n  date.setMonth(date.getMonth() + monthIndex);\n  \n  return date.toLocaleString('es-ES', { month: 'long', year: 'numeric' });\n};\n\n/**\n * Identificar categorías con mayor crecimiento o decrecimiento\n * @returns {Promise<Object>} - Categorías con mayor variación\n */\nexport const identifyTrendingCategories = async () => {\n  try {\n    // Obtener transacciones\n    const transactions = await getTransactions();\n    \n    if (transactions.length === 0) {\n      return { increasing: [], decreasing: [] };\n    }\n    \n    // Separar por tipo\n    const expenses = transactions.filter(t => t.type === 'expense');\n    const incomes = transactions.filter(t => t.type === 'income');\n    \n    // Calcular tendencias\n    const expenseTrends = calculateTrends(groupTransactionsByMonth(expenses));\n    const incomeTrends = calculateTrends(groupTransactionsByMonth(incomes));\n    \n    // Identificar categorías con mayor crecimiento en gastos\n    const expenseCategories = Object.keys(expenseTrends.categories);\n    const increasingExpenses = expenseCategories\n      .filter(category => expenseTrends.categories[category] > 0.05) // 5% de crecimiento\n      .map(category => ({\n        category,\n        trend: expenseTrends.categories[category],\n        type: 'expense'\n      }))\n      .sort((a, b) => b.trend - a.trend)\n      .slice(0, 3);\n    \n    // Identificar categorías con mayor decrecimiento en gastos\n    const decreasingExpenses = expenseCategories\n      .filter(category => expenseTrends.categories[category] < -0.05) // 5% de decrecimiento\n      .map(category => ({\n        category,\n        trend: expenseTrends.categories[category],\n        type: 'expense'\n      }))\n      .sort((a, b) => a.trend - b.trend)\n      .slice(0, 3);\n    \n    // Identificar categorías con mayor crecimiento en ingresos\n    const incomeCategories = Object.keys(incomeTrends.categories);\n    const increasingIncomes = incomeCategories\n      .filter(category => incomeTrends.categories[category] > 0.05)\n      .map(category => ({\n        category,\n        trend: incomeTrends.categories[category],\n        type: 'income'\n      }))\n      .sort((a, b) => b.trend - a.trend)\n      .slice(0, 3);\n    \n    // Identificar categorías con mayor decrecimiento en ingresos\n    const decreasingIncomes = incomeCategories\n      .filter(category => incomeTrends.categories[category] < -0.05)\n      .map(category => ({\n        category,\n        trend: incomeTrends.categories[category],\n        type: 'income'\n      }))\n      .sort((a, b) => a.trend - b.trend)\n      .slice(0, 3);\n    \n    return {\n      increasing: [...increasingIncomes, ...increasingExpenses],\n      decreasing: [...decreasingIncomes, ...decreasingExpenses]\n    };\n  } catch (error) {\n    console.error('Error al identificar categorías con tendencia:', error);\n    return { increasing: [], decreasing: [] };\n  }\n};\n\n/**\n * Detectar patrones de gasto recurrentes\n * @returns {Promise<Array>} - Patrones detectados\n */\nexport const detectRecurringPatterns = async () => {\n  try {\n    // Obtener transacciones\n    const transactions = await getTransactions();\n    const expenses = transactions.filter(t => t.type === 'expense');\n    \n    if (expenses.length < 5) {\n      return [];\n    }\n    \n    // Agrupar por título y categoría\n    const groups = {};\n    \n    expenses.forEach(expense => {\n      const key = `${expense.title.toLowerCase()}_${expense.category || 'sin_categoria'}`;\n      \n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      \n      groups[key].push(expense);\n    });\n    \n    // Filtrar grupos con al menos 2 transacciones\n    const recurringGroups = Object.keys(groups)\n      .filter(key => groups[key].length >= 2)\n      .map(key => {\n        const transactions = groups[key];\n        const title = transactions[0].title;\n        const category = transactions[0].category;\n        \n        // Ordenar por fecha\n        transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n        \n        // Calcular intervalos entre transacciones\n        const intervals = [];\n        for (let i = 1; i < transactions.length; i++) {\n          const prevDate = new Date(transactions[i - 1].date);\n          const currDate = new Date(transactions[i].date);\n          const diffDays = Math.round((currDate - prevDate) / (1000 * 60 * 60 * 24));\n          intervals.push(diffDays);\n        }\n        \n        // Calcular intervalo promedio\n        const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n        \n        // Calcular desviación estándar\n        const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length;\n        const stdDev = Math.sqrt(variance);\n        \n        // Determinar si es recurrente (desviación estándar baja)\n        const isRecurring = stdDev < avgInterval * 0.3; // 30% de variación máxima\n        \n        // Calcular monto promedio\n        const avgAmount = transactions.reduce((sum, t) => sum + t.amount, 0) / transactions.length;\n        \n        // Determinar frecuencia\n        let frequency = 'irregular';\n        if (isRecurring) {\n          if (avgInterval >= 25 && avgInterval <= 35) {\n            frequency = 'mensual';\n          } else if (avgInterval >= 6 && avgInterval <= 8) {\n            frequency = 'semanal';\n          } else if (avgInterval >= 13 && avgInterval <= 16) {\n            frequency = 'quincenal';\n          } else if (avgInterval >= 85 && avgInterval <= 95) {\n            frequency = 'trimestral';\n          }\n        }\n        \n        // Predecir próxima fecha\n        let nextDate = null;\n        if (isRecurring) {\n          const lastDate = new Date(transactions[transactions.length - 1].date);\n          nextDate = new Date(lastDate);\n          nextDate.setDate(lastDate.getDate() + Math.round(avgInterval));\n        }\n        \n        return {\n          title,\n          category,\n          frequency,\n          isRecurring,\n          avgAmount,\n          avgInterval: Math.round(avgInterval),\n          occurrences: transactions.length,\n          lastDate: transactions[transactions.length - 1].date,\n          nextDate: nextDate ? nextDate.toISOString().split('T')[0] : null,\n          confidence: isRecurring ? (1 - stdDev / avgInterval) : 0\n        };\n      })\n      .filter(group => group.isRecurring)\n      .sort((a, b) => b.confidence - a.confidence);\n    \n    return recurringGroups;\n  } catch (error) {\n    console.error('Error al detectar patrones recurrentes:', error);\n    return [];\n  }\n};\n\n/**\n * Generar recomendaciones de ahorro basadas en patrones de gasto\n * @returns {Promise<Array>} - Recomendaciones de ahorro\n */\nexport const generateSavingRecommendations = async () => {\n  try {\n    // Obtener transacciones\n    const transactions = await getTransactions();\n    const expenses = transactions.filter(t => t.type === 'expense');\n    \n    if (expenses.length === 0) {\n      return [];\n    }\n    \n    // Calcular gasto total y por categoría\n    const totalExpense = expenses.reduce((sum, t) => sum + t.amount, 0);\n    \n    // Agrupar por categoría\n    const categoryExpenses = {};\n    expenses.forEach(expense => {\n      const category = expense.category || 'Sin categoría';\n      \n      if (!categoryExpenses[category]) {\n        categoryExpenses[category] = 0;\n      }\n      \n      categoryExpenses[category] += expense.amount;\n    });\n    \n    // Calcular porcentajes por categoría\n    const categoryPercentages = {};\n    Object.keys(categoryExpenses).forEach(category => {\n      categoryPercentages[category] = categoryExpenses[category] / totalExpense;\n    });\n    \n    // Identificar categorías con alto porcentaje de gasto\n    const highExpenseCategories = Object.keys(categoryPercentages)\n      .filter(category => categoryPercentages[category] > 0.15) // Más del 15% del gasto total\n      .map(category => ({\n        category,\n        percentage: categoryPercentages[category],\n        amount: categoryExpenses[category]\n      }))\n      .sort((a, b) => b.percentage - a.percentage);\n    \n    // Generar recomendaciones\n    const recommendations = [];\n    \n    // Recomendaciones por categoría de alto gasto\n    highExpenseCategories.forEach(categoryData => {\n      const { category, percentage, amount } = categoryData;\n      \n      // Calcular ahorro potencial (reducción del 10%)\n      const potentialSaving = amount * 0.1;\n      \n      recommendations.push({\n        type: 'high_expense_category',\n        category,\n        percentage: percentage,\n        currentAmount: amount,\n        potentialSaving,\n        message: `Tus gastos en ${category} representan el ${(percentage * 100).toFixed(1)}% de tus gastos totales. Reduciendo un 10% podrías ahorrar ${potentialSaving.toFixed(2)} pesos.`\n      });\n    });\n    \n    // Detectar gastos pequeños pero frecuentes\n    const smallExpenses = expenses.filter(t => t.amount < 500); // Gastos menores a 500 pesos\n    \n    if (smallExpenses.length > expenses.length * 0.3) { // Si más del 30% son gastos pequeños\n      const totalSmallExpense = smallExpenses.reduce((sum, t) => sum + t.amount, 0);\n      const potentialSaving = totalSmallExpense * 0.2; // 20% de ahorro potencial\n      \n      recommendations.push({\n        type: 'small_frequent_expenses',\n        count: smallExpenses.length,\n        totalAmount: totalSmallExpense,\n        potentialSaving,\n        message: `Tienes ${smallExpenses.length} gastos pequeños que suman ${totalSmallExpense.toFixed(2)} pesos. Reduciendo estos gastos podrías ahorrar hasta ${potentialSaving.toFixed(2)} pesos.`\n      });\n    }\n    \n    // Detectar patrones recurrentes para posibles suscripciones\n    const recurringPatterns = await detectRecurringPatterns();\n    const subscriptions = recurringPatterns.filter(p => \n      p.frequency === 'mensual' && \n      p.avgAmount < 2000 && // Monto típico de suscripciones\n      p.confidence > 0.7 // Alta confianza\n    );\n    \n    if (subscriptions.length > 0) {\n      const totalSubscriptions = subscriptions.reduce((sum, s) => sum + s.avgAmount, 0);\n      \n      recommendations.push({\n        type: 'subscriptions',\n        count: subscriptions.length,\n        totalAmount: totalSubscriptions,\n        subscriptions,\n        message: `Tienes ${subscriptions.length} posibles suscripciones que suman ${totalSubscriptions.toFixed(2)} pesos mensuales. Revisa si todas son necesarias.`\n      });\n    }\n    \n    return recommendations;\n  } catch (error) {\n    console.error('Error al generar recomendaciones de ahorro:', error);\n    return [];\n  }\n};\n\n/**\n * Predecir flujo de caja para los próximos meses\n * @param {number} months - Número de meses a predecir\n * @returns {Promise<Object>} - Predicción de flujo de caja\n */\nexport const predictCashFlow = async (months = 3) => {\n  try {\n    // Obtener balance actual\n    const transactions = await getTransactions();\n    const currentBalance = transactions.reduce((balance, t) => {\n      return balance + (t.type === 'income' ? t.amount : -t.amount);\n    }, 0);\n    \n    // Obtener predicciones de balance\n    const balancePredictions = await predictBalance(months);\n    \n    // Calcular flujo de caja acumulativo\n    let runningBalance = currentBalance;\n    const cashFlow = balancePredictions.map(prediction => {\n      runningBalance += prediction.balance;\n      \n      return {\n        ...prediction,\n        startingBalance: runningBalance - prediction.balance,\n        endingBalance: runningBalance,\n        cashFlow: prediction.balance\n      };\n    });\n    \n    return {\n      currentBalance,\n      predictions: cashFlow\n    };\n  } catch (error) {\n    console.error('Error al predecir flujo de caja:', error);\n    return {\n      currentBalance: 0,\n      predictions: []\n    };\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { FiTrendingUp, FiRefreshCw, FiAlertCircle, FiCheckCircle, FiInfo } from 'react-icons/fi';\nimport { Line } from 'react-chartjs-2';\nimport {\n  predictExpenses,\n  predictIncome,\n  predictBalance,\n  predictCashFlow,\n  detectRecurringPatterns\n} from '../../services/predictiveAnalysisService';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport AnimatedButton from '../common/AnimatedButton';\nimport { showError } from '../common/Notification';\n\n// Estilos\nconst PredictiveContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: var(--border-radius);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  padding: 24px;\n  margin-bottom: 32px;\n  color: #ffffff;\n`;\n\nconst PredictiveHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid var(--bg-medium);\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n  }\n`;\n\nconst PredictiveTitle = styled.h2`\n  margin: 0;\n  color: #ffffff;\n  font-size: 1.5rem;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  svg {\n    color: var(--primary-color);\n  }\n`;\n\nconst TabsContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  border-bottom: 1px solid var(--bg-medium);\n\n  @media (max-width: 768px) {\n    overflow-x: auto;\n    padding-bottom: 8px;\n    margin-bottom: 16px;\n  }\n`;\n\nconst Tab = styled.button`\n  background: none;\n  border: none;\n  padding: 8px 16px;\n  font-size: 1rem;\n  color: ${props => props.active ? 'var(--primary-color)' : '#cccccc'};\n  font-weight: ${props => props.active ? '600' : '400'};\n  border-bottom: 2px solid ${props => props.active ? 'var(--primary-color)' : 'transparent'};\n  cursor: pointer;\n  transition: all 0.3s;\n\n  &:hover {\n    color: var(--primary-color);\n  }\n`;\n\nconst ChartContainer = styled.div`\n  height: 400px;\n  position: relative;\n  margin-top: 24px;\n  margin-bottom: 32px;\n`;\n\nconst PredictionCard = styled.div`\n  background-color: var(--card-bg);\n  border-radius: var(--border-radius);\n  box-shadow: var(--card-shadow);\n  padding: 16px;\n  margin-bottom: 16px;\n  border-left: 4px solid ${props => props.color || 'var(--primary-color)'};\n`;\n\nconst PredictionTitle = styled.h3`\n  margin: 0 0 8px 0;\n  font-size: 1.1rem;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  svg {\n    color: ${props => props.color || 'var(--primary-color)'};\n  }\n`;\n\nconst PredictionContent = styled.div`\n  margin-bottom: 8px;\n  font-size: 0.95rem;\n  color: #cccccc;\n  line-height: 1.5;\n`;\n\nconst PredictionValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: ${props => props.color || 'var(--primary-color)'};\n  margin: 8px 0;\n`;\n\nconst PredictionGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 16px;\n  margin-top: 24px;\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 48px 24px;\n  color: #cccccc;\n\n  h4 {\n    margin-bottom: 16px;\n    color: #ffffff;\n  }\n\n  p {\n    margin-bottom: 24px;\n  }\n`;\n\n// Opciones para los gráficos\nconst chartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: 'top',\n      labels: {\n        color: '#ffffff'\n      }\n    },\n    tooltip: {\n      mode: 'index',\n      intersect: false,\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      titleColor: '#ffffff',\n      bodyColor: '#ffffff',\n      borderColor: 'rgba(255, 255, 255, 0.2)',\n      borderWidth: 1\n    },\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n      grid: {\n        color: 'rgba(255, 255, 255, 0.1)'\n      },\n      ticks: {\n        color: '#cccccc'\n      }\n    },\n    x: {\n      grid: {\n        color: 'rgba(255, 255, 255, 0.1)'\n      },\n      ticks: {\n        color: '#cccccc'\n      }\n    }\n  },\n};\n\n/**\n * Componente para mostrar análisis predictivo\n * @returns {JSX.Element} - Componente de análisis predictivo\n */\nconst PredictiveAnalytics = () => {\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('cashflow');\n  const [predictions, setPredictions] = useState({\n    expenses: [],\n    income: [],\n    balance: [],\n    cashFlow: { currentBalance: 0, predictions: [] },\n    patterns: []\n  });\n  const [hasData, setHasData] = useState(false);\n\n  // Cargar predicciones\n  useEffect(() => {\n    const loadPredictions = async () => {\n      try {\n        setLoading(true);\n\n        // Cargar todas las predicciones en paralelo\n        const [expenses, income, balance, cashFlow, patterns] = await Promise.all([\n          predictExpenses(6),\n          predictIncome(6),\n          predictBalance(6),\n          predictCashFlow(6),\n          detectRecurringPatterns()\n        ]);\n\n        setPredictions({\n          expenses,\n          income,\n          balance,\n          cashFlow,\n          patterns\n        });\n\n        // Verificar si hay suficientes datos para mostrar predicciones\n        setHasData(\n          expenses.length > 0 ||\n          income.length > 0 ||\n          balance.length > 0 ||\n          cashFlow.predictions.length > 0 ||\n          patterns.length > 0\n        );\n      } catch (error) {\n        console.error('Error al cargar predicciones:', error);\n        showError('Error al cargar predicciones financieras');\n        setHasData(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPredictions();\n  }, []);\n\n  // Formatear moneda\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('es-AR', {\n      style: 'currency',\n      currency: 'ARS',\n    }).format(amount);\n  };\n\n  // Preparar datos para el gráfico de flujo de caja\n  const cashFlowChartData = {\n    labels: predictions.cashFlow.predictions.map(p => p.month),\n    datasets: [\n      {\n        label: 'Balance Final',\n        data: predictions.cashFlow.predictions.map(p => p.endingBalance),\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.3)',\n        fill: true,\n        tension: 0.4,\n      },\n      {\n        label: 'Ingresos',\n        data: predictions.cashFlow.predictions.map(p => p.income),\n        borderColor: 'rgba(54, 162, 235, 1)',\n        backgroundColor: 'rgba(54, 162, 235, 0.3)',\n        borderDash: [5, 5],\n        tension: 0.4,\n      },\n      {\n        label: 'Gastos',\n        data: predictions.cashFlow.predictions.map(p => p.expense),\n        borderColor: 'rgba(255, 99, 132, 1)',\n        backgroundColor: 'rgba(255, 99, 132, 0.3)',\n        borderDash: [5, 5],\n        tension: 0.4,\n      },\n    ],\n  };\n\n  // Preparar datos para el gráfico de ingresos y gastos\n  const incomeExpenseChartData = {\n    labels: predictions.balance.map(p => p.month),\n    datasets: [\n      {\n        label: 'Ingresos Previstos',\n        data: predictions.balance.map(p => p.income),\n        borderColor: 'rgba(54, 162, 235, 1)',\n        backgroundColor: 'rgba(54, 162, 235, 0.3)',\n        fill: true,\n        tension: 0.4,\n      },\n      {\n        label: 'Gastos Previstos',\n        data: predictions.balance.map(p => p.expense),\n        borderColor: 'rgba(255, 99, 132, 1)',\n        backgroundColor: 'rgba(255, 99, 132, 0.3)',\n        fill: true,\n        tension: 0.4,\n      },\n    ],\n  };\n\n  // Renderizar contenido según la pestaña activa\n  const renderContent = () => {\n    if (loading) {\n      return <LoadingSpinner text=\"Calculando predicciones...\" />;\n    }\n\n    if (!hasData) {\n      return (\n        <EmptyState>\n          <h4>No hay suficientes datos para generar predicciones</h4>\n          <p>Agrega más transacciones para obtener predicciones financieras precisas.</p>\n          <AnimatedButton onClick={() => window.location.href = '/finances'}>\n            Ir a Finanzas\n          </AnimatedButton>\n        </EmptyState>\n      );\n    }\n\n    switch (activeTab) {\n      case 'cashflow':\n        return (\n          <>\n            <PredictionCard color=\"var(--primary-color)\">\n              <PredictionTitle color=\"var(--primary-color)\">\n                <FiInfo /> Predicción de Flujo de Caja\n              </PredictionTitle>\n              <PredictionContent>\n                Basado en tus patrones de ingresos y gastos, así es como podría evolucionar tu balance en los próximos meses.\n              </PredictionContent>\n            </PredictionCard>\n\n            <ChartContainer>\n              <Line data={cashFlowChartData} options={chartOptions} />\n            </ChartContainer>\n\n            <PredictionGrid>\n              {predictions.cashFlow.predictions.map((prediction, index) => (\n                <PredictionCard\n                  key={index}\n                  color={prediction.balance >= 0 ? \"var(--success-color)\" : \"var(--danger-color)\"}\n                >\n                  <PredictionTitle>\n                    {prediction.month}\n                  </PredictionTitle>\n                  <PredictionContent>\n                    Balance proyectado al final del mes\n                  </PredictionContent>\n                  <PredictionValue color={prediction.balance >= 0 ? \"var(--success-color)\" : \"var(--danger-color)\"}>\n                    {formatCurrency(prediction.endingBalance)}\n                  </PredictionValue>\n                  <PredictionContent>\n                    <strong>Ingresos:</strong> {formatCurrency(prediction.income)}<br />\n                    <strong>Gastos:</strong> {formatCurrency(prediction.expense)}<br />\n                    <strong>Flujo neto:</strong> {formatCurrency(prediction.balance)}\n                  </PredictionContent>\n                </PredictionCard>\n              ))}\n            </PredictionGrid>\n          </>\n        );\n\n      case 'income-expense':\n        return (\n          <>\n            <PredictionCard color=\"var(--primary-color)\">\n              <PredictionTitle color=\"var(--primary-color)\">\n                <FiInfo /> Predicción de Ingresos y Gastos\n              </PredictionTitle>\n              <PredictionContent>\n                Proyección de tus ingresos y gastos para los próximos meses, basada en tus patrones históricos.\n              </PredictionContent>\n            </PredictionCard>\n\n            <ChartContainer>\n              <Line data={incomeExpenseChartData} options={chartOptions} />\n            </ChartContainer>\n\n            <PredictionGrid>\n              {predictions.balance.map((prediction, index) => (\n                <PredictionCard\n                  key={index}\n                  color={prediction.balance >= 0 ? \"var(--success-color)\" : \"var(--danger-color)\"}\n                >\n                  <PredictionTitle>\n                    {prediction.month}\n                  </PredictionTitle>\n                  <PredictionContent>\n                    Balance proyectado para el mes\n                  </PredictionContent>\n                  <PredictionValue color={prediction.balance >= 0 ? \"var(--success-color)\" : \"var(--danger-color)\"}>\n                    {formatCurrency(prediction.balance)}\n                  </PredictionValue>\n                  <PredictionContent>\n                    <strong>Ingresos:</strong> {formatCurrency(prediction.income)}<br />\n                    <strong>Gastos:</strong> {formatCurrency(prediction.expense)}\n                  </PredictionContent>\n                </PredictionCard>\n              ))}\n            </PredictionGrid>\n          </>\n        );\n\n      case 'patterns':\n        return (\n          <>\n            <PredictionCard color=\"var(--info-color)\">\n              <PredictionTitle color=\"var(--info-color)\">\n                <FiInfo /> Patrones Recurrentes Detectados\n              </PredictionTitle>\n              <PredictionContent>\n                Hemos identificado estos patrones recurrentes en tus transacciones que podrían ser pagos o ingresos periódicos.\n              </PredictionContent>\n            </PredictionCard>\n\n            {predictions.patterns.length > 0 ? (\n              <PredictionGrid>\n                {predictions.patterns.map((pattern, index) => (\n                  <PredictionCard\n                    key={index}\n                    color={pattern.avgAmount > 0 ? \"var(--success-color)\" : \"var(--danger-color)\"}\n                  >\n                    <PredictionTitle>\n                      {pattern.title}\n                    </PredictionTitle>\n                    <PredictionContent>\n                      <strong>Categoría:</strong> {pattern.category}<br />\n                      <strong>Frecuencia:</strong> {pattern.frequency}<br />\n                      <strong>Monto promedio:</strong> {formatCurrency(pattern.avgAmount)}<br />\n                      <strong>Ocurrencias:</strong> {pattern.occurrences} veces<br />\n                      {pattern.nextDate && (\n                        <>\n                          <strong>Próxima fecha estimada:</strong> {new Date(pattern.nextDate).toLocaleDateString('es-ES')}\n                        </>\n                      )}\n                    </PredictionContent>\n                  </PredictionCard>\n                ))}\n              </PredictionGrid>\n            ) : (\n              <EmptyState>\n                <h4>No se detectaron patrones recurrentes</h4>\n                <p>Necesitamos más transacciones para identificar patrones confiables.</p>\n              </EmptyState>\n            )}\n          </>\n        );\n\n      default:\n        return <div>Selecciona una pestaña para ver las predicciones</div>;\n    }\n  };\n\n  return (\n    <PredictiveContainer>\n      <PredictiveHeader>\n        <PredictiveTitle>\n          <FiTrendingUp /> Análisis Predictivo\n        </PredictiveTitle>\n        <AnimatedButton\n          variant=\"outline\"\n          onClick={() => window.location.reload()}\n          disabled={loading}\n        >\n          <FiRefreshCw /> Actualizar\n        </AnimatedButton>\n      </PredictiveHeader>\n\n      <TabsContainer>\n        <Tab\n          active={activeTab === 'cashflow'}\n          onClick={() => setActiveTab('cashflow')}\n        >\n          Flujo de Caja\n        </Tab>\n        <Tab\n          active={activeTab === 'income-expense'}\n          onClick={() => setActiveTab('income-expense')}\n        >\n          Ingresos y Gastos\n        </Tab>\n        <Tab\n          active={activeTab === 'patterns'}\n          onClick={() => setActiveTab('patterns')}\n        >\n          Patrones Recurrentes\n        </Tab>\n      </TabsContainer>\n\n      {renderContent()}\n    </PredictiveContainer>\n  );\n};\n\nexport default PredictiveAnalytics;\n","/**\n * Servicio para gestionar eventos del calendario\n */\n\nimport { supabase } from './supabase';\nimport { \n  getCachedValue, \n  setCachedValue, \n  removeCachedValue, \n  withCache \n} from './advancedCacheService';\nimport { \n  saveToIndexedDB, \n  getFromIndexedDB, \n  deleteFromIndexedDB,\n  addToSyncQueue,\n  checkOnlineStatus\n} from './offlineStorage';\n\n/**\n * Obtiene todos los eventos del calendario del usuario actual\n * @returns {Promise<Array>} - Lista de eventos\n */\nexport const getEvents = async () => {\n  try {\n    // Obtener el usuario actual\n    const { data: { user } } = await supabase.auth.getUser();\n\n    // Si no hay usuario, devolver un array vacío\n    if (!user) {\n      console.error('No authenticated user found');\n      return [];\n    }\n\n    // Clave de caché basada en el ID del usuario\n    const cacheKey = `events_${user.id}`;\n    \n    // Función para obtener datos de Supabase\n    const fetchFromSupabase = async () => {\n      console.log('Fetching events from Supabase');\n      const { data, error } = await supabase\n        .from('events')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('start_date', { ascending: true });\n\n      if (error) {\n        console.error('Error fetching events from Supabase:', error);\n        throw error;\n      }\n\n      // Guardar en IndexedDB para acceso offline\n      const result = data || [];\n      await saveToIndexedDB('events', result);\n      \n      return result;\n    };\n    \n    // Función para obtener datos de IndexedDB\n    const fetchFromIndexedDB = async () => {\n      console.log('Fetching events from IndexedDB');\n      const localData = await getFromIndexedDB('events');\n      return localData.filter(e => e.user_id === user.id);\n    };\n    \n    // Verificar si hay conexión a Internet\n    if (checkOnlineStatus()) {\n      // Si hay conexión, intentar obtener datos con caché\n      try {\n        // Usar withCache para manejar automáticamente la caché\n        return await withCache(\n          fetchFromSupabase,\n          cacheKey,\n          5 * 60 * 1000, // 5 minutos de TTL\n          { priority: true } // Prioridad alta para evitar evicción\n        );\n      } catch (error) {\n        console.error('Error fetching from Supabase with cache:', error);\n        // Si hay error, intentar obtener datos de IndexedDB\n        return await fetchFromIndexedDB();\n      }\n    } else {\n      // Si no hay conexión, obtener datos de IndexedDB\n      console.log('Offline mode: using IndexedDB');\n      const localData = await fetchFromIndexedDB();\n      \n      // Almacenar en caché con TTL más largo para modo offline\n      setCachedValue(cacheKey, localData, 10 * 60 * 1000, { priority: true });\n      \n      return localData;\n    }\n  } catch (error) {\n    console.error('Error in getEvents:', error);\n    \n    // Intentar obtener datos de IndexedDB en caso de error\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (user) {\n        const localData = await getFromIndexedDB('events');\n        return localData.filter(e => e.user_id === user.id);\n      }\n    } catch (err) {\n      console.error('Error fetching from IndexedDB:', err);\n    }\n    \n    return [];\n  }\n};\n\n/**\n * Obtiene un evento por su ID\n * @param {string} id - ID del evento\n * @returns {Promise<Object|null>} - Evento encontrado o null\n */\nexport const getEventById = async (id) => {\n  try {\n    // Obtener el usuario actual\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      throw new Error('No authenticated user found');\n    }\n\n    // Clave de caché\n    const cacheKey = `event_${id}`;\n    \n    // Función para obtener datos de Supabase\n    const fetchFromSupabase = async () => {\n      const { data, error } = await supabase\n        .from('events')\n        .select('*')\n        .eq('id', id)\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    };\n    \n    // Función para obtener datos de IndexedDB\n    const fetchFromIndexedDB = async () => {\n      try {\n        return await getFromIndexedDB('events', id);\n      } catch (err) {\n        return null;\n      }\n    };\n    \n    // Verificar si hay conexión a Internet\n    if (checkOnlineStatus()) {\n      // Si hay conexión, intentar obtener datos con caché\n      try {\n        // Usar withCache para manejar automáticamente la caché\n        return await withCache(\n          fetchFromSupabase,\n          cacheKey,\n          5 * 60 * 1000, // 5 minutos de TTL\n          { priority: true } // Prioridad alta para evitar evicción\n        );\n      } catch (error) {\n        console.error('Error fetching event from Supabase:', error);\n        // Si hay error, intentar obtener datos de IndexedDB\n        return await fetchFromIndexedDB();\n      }\n    } else {\n      // Si no hay conexión, obtener datos de IndexedDB\n      return await fetchFromIndexedDB();\n    }\n  } catch (error) {\n    console.error('Error in getEventById:', error);\n    return null;\n  }\n};\n\n/**\n * Crea un nuevo evento\n * @param {Object} eventData - Datos del evento\n * @returns {Promise<Object|null>} - Evento creado o null\n */\nexport const createEvent = async (eventData) => {\n  try {\n    // Obtener el usuario actual\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      throw new Error('No authenticated user found');\n    }\n\n    // Preparar los datos del evento\n    const event = {\n      ...eventData,\n      user_id: user.id,\n      created_at: new Date().toISOString(),\n      // Generar un ID temporal para uso offline\n      id: eventData.id || `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    };\n\n    // Verificar si hay conexión a Internet\n    if (checkOnlineStatus()) {\n      // Si hay conexión, crear el evento en Supabase\n      const { data, error } = await supabase\n        .from('events')\n        .insert([event])\n        .select();\n\n      if (error) {\n        console.error('Error creating event in Supabase:', error);\n        \n        // Si hay error, guardar localmente y agregar a la cola de sincronización\n        await saveToIndexedDB('events', event);\n        await addToSyncQueue({\n          type: 'CREATE',\n          storeName: 'events',\n          data: event,\n        });\n        \n        // Invalidar la caché\n        removeCachedValue(`events_${user.id}`);\n        \n        return event;\n      }\n\n      // Si se creó correctamente, guardar en IndexedDB\n      const createdEvent = data?.[0] || null;\n      if (createdEvent) {\n        await saveToIndexedDB('events', createdEvent);\n      }\n      \n      // Invalidar la caché\n      removeCachedValue(`events_${user.id}`);\n      \n      console.log('Event created successfully in Supabase:', createdEvent);\n      return createdEvent;\n    } else {\n      // Si no hay conexión, guardar localmente y agregar a la cola de sincronización\n      await saveToIndexedDB('events', event);\n      await addToSyncQueue({\n        type: 'CREATE',\n        storeName: 'events',\n        data: event,\n      });\n      \n      // Invalidar la caché\n      removeCachedValue(`events_${user.id}`);\n      \n      console.log('Event created locally (offline mode):', event);\n      return event;\n    }\n  } catch (error) {\n    console.error('Error in createEvent:', error);\n    throw error;\n  }\n};\n\n/**\n * Actualiza un evento existente\n * @param {string} id - ID del evento\n * @param {Object} updates - Datos a actualizar\n * @returns {Promise<Object|null>} - Evento actualizado o null\n */\nexport const updateEvent = async (id, updates) => {\n  try {\n    // Obtener el usuario actual\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      throw new Error('No authenticated user found');\n    }\n\n    // Obtener el evento actual\n    const currentEvent = await getEventById(id);\n    if (!currentEvent) {\n      throw new Error('Event not found');\n    }\n\n    // Verificar que el evento pertenece al usuario\n    if (currentEvent.user_id !== user.id) {\n      throw new Error('You do not have permission to update this event');\n    }\n\n    // Preparar los datos actualizados\n    const updatedEvent = {\n      ...currentEvent,\n      ...updates,\n      updated_at: new Date().toISOString(),\n    };\n\n    // Verificar si hay conexión a Internet\n    if (checkOnlineStatus()) {\n      // Si hay conexión, actualizar en Supabase\n      const { data, error } = await supabase\n        .from('events')\n        .update(updates)\n        .eq('id', id)\n        .eq('user_id', user.id)\n        .select();\n\n      if (error) {\n        console.error('Error updating event in Supabase:', error);\n        \n        // Si hay error, actualizar localmente y agregar a la cola de sincronización\n        await saveToIndexedDB('events', updatedEvent);\n        await addToSyncQueue({\n          type: 'UPDATE',\n          storeName: 'events',\n          data: updatedEvent,\n        });\n        \n        // Invalidar la caché\n        removeCachedValue(`events_${user.id}`);\n        removeCachedValue(`event_${id}`);\n        \n        return updatedEvent;\n      }\n\n      // Si se actualizó correctamente, actualizar en IndexedDB\n      const result = data?.[0] || null;\n      if (result) {\n        await saveToIndexedDB('events', result);\n      }\n      \n      // Invalidar la caché\n      removeCachedValue(`events_${user.id}`);\n      removeCachedValue(`event_${id}`);\n      \n      console.log('Event updated successfully in Supabase:', result);\n      return result;\n    } else {\n      // Si no hay conexión, actualizar localmente y agregar a la cola de sincronización\n      await saveToIndexedDB('events', updatedEvent);\n      await addToSyncQueue({\n        type: 'UPDATE',\n        storeName: 'events',\n        data: updatedEvent,\n      });\n      \n      // Invalidar la caché\n      removeCachedValue(`events_${user.id}`);\n      removeCachedValue(`event_${id}`);\n      \n      console.log('Event updated locally (offline mode):', updatedEvent);\n      return updatedEvent;\n    }\n  } catch (error) {\n    console.error('Error in updateEvent:', error);\n    throw error;\n  }\n};\n\n/**\n * Elimina un evento\n * @param {string} id - ID del evento\n * @returns {Promise<boolean>} - true si se eliminó correctamente\n */\nexport const deleteEvent = async (id) => {\n  try {\n    // Obtener el usuario actual\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      throw new Error('No authenticated user found');\n    }\n\n    // Obtener el evento para verificar permisos\n    const event = await getEventById(id);\n    if (!event) {\n      throw new Error('Event not found');\n    }\n\n    // Verificar que el evento pertenece al usuario\n    if (event.user_id !== user.id) {\n      throw new Error('You do not have permission to delete this event');\n    }\n\n    // Verificar si hay conexión a Internet\n    if (checkOnlineStatus()) {\n      // Si hay conexión, eliminar en Supabase\n      const { error } = await supabase\n        .from('events')\n        .delete()\n        .eq('id', id)\n        .eq('user_id', user.id);\n\n      if (error) {\n        console.error('Error deleting event from Supabase:', error);\n        \n        // Si hay error, marcar como eliminado localmente y agregar a la cola de sincronización\n        await deleteFromIndexedDB('events', id);\n        await addToSyncQueue({\n          type: 'DELETE',\n          storeName: 'events',\n          data: { id, user_id: user.id },\n        });\n        \n        // Invalidar la caché\n        removeCachedValue(`events_${user.id}`);\n        removeCachedValue(`event_${id}`);\n        \n        return true;\n      }\n\n      // Si se eliminó correctamente, eliminar de IndexedDB\n      await deleteFromIndexedDB('events', id);\n      \n      // Invalidar la caché\n      removeCachedValue(`events_${user.id}`);\n      removeCachedValue(`event_${id}`);\n      \n      console.log('Event deleted successfully');\n      return true;\n    } else {\n      // Si no hay conexión, marcar como eliminado localmente y agregar a la cola de sincronización\n      await deleteFromIndexedDB('events', id);\n      await addToSyncQueue({\n        type: 'DELETE',\n        storeName: 'events',\n        data: { id, user_id: user.id },\n      });\n      \n      // Invalidar la caché\n      removeCachedValue(`events_${user.id}`);\n      removeCachedValue(`event_${id}`);\n      \n      console.log('Event marked for deletion locally (offline mode)');\n      return true;\n    }\n  } catch (error) {\n    console.error('Error in deleteEvent:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene eventos por rango de fechas\n * @param {string} startDate - Fecha de inicio (YYYY-MM-DD)\n * @param {string} endDate - Fecha de fin (YYYY-MM-DD)\n * @returns {Promise<Array>} - Lista de eventos en el rango\n */\nexport const getEventsByDateRange = async (startDate, endDate) => {\n  try {\n    // Obtener todos los eventos\n    const events = await getEvents();\n    \n    // Filtrar por rango de fechas\n    return events.filter(event => {\n      const eventDate = new Date(event.start_date);\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      \n      // Ajustar las fechas para ignorar la hora\n      start.setHours(0, 0, 0, 0);\n      end.setHours(23, 59, 59, 999);\n      \n      return eventDate >= start && eventDate <= end;\n    });\n  } catch (error) {\n    console.error('Error in getEventsByDateRange:', error);\n    return [];\n  }\n};\n","/**\n * Servicio para generar recomendaciones personalizadas\n */\n\nimport { getTransactions } from './transactionService';\nimport { getTasks } from './taskService';\nimport { getEvents } from './calendarService';\nimport { getFinancialGoals } from './financialGoalService';\nimport { getFromLocalStorage, saveToLocalStorage } from './offlineStorage';\nimport { \n  detectRecurringPatterns, \n  identifyTrendingCategories,\n  generateSavingRecommendations,\n  predictCashFlow\n} from './predictiveAnalysisService';\n\n// Constantes\nconst RECOMMENDATIONS_CACHE_KEY = 'personalized_recommendations';\nconst RECOMMENDATIONS_CACHE_DURATION = 12 * 60 * 60 * 1000; // 12 horas\n\n/**\n * Generar recomendaciones financieras personalizadas\n * @returns {Promise<Array>} - Lista de recomendaciones\n */\nexport const generateFinancialRecommendations = async () => {\n  try {\n    // Verificar si hay recomendaciones en caché\n    const cachedRecommendations = getFromLocalStorage(RECOMMENDATIONS_CACHE_KEY);\n    if (\n      cachedRecommendations &&\n      cachedRecommendations.financial &&\n      cachedRecommendations.timestamp &&\n      Date.now() - cachedRecommendations.timestamp < RECOMMENDATIONS_CACHE_DURATION\n    ) {\n      return cachedRecommendations.financial;\n    }\n\n    // Obtener datos necesarios\n    const transactions = await getTransactions();\n    const financialGoals = await getFinancialGoals();\n    const recurringPatterns = await detectRecurringPatterns();\n    const trendingCategories = await identifyTrendingCategories();\n    const savingRecommendations = await generateSavingRecommendations();\n    const cashFlow = await predictCashFlow(3);\n    \n    const recommendations = [];\n    \n    // Recomendaciones basadas en tendencias de categorías\n    if (trendingCategories.increasing.length > 0) {\n      trendingCategories.increasing.forEach(category => {\n        if (category.type === 'expense') {\n          recommendations.push({\n            id: `trend_expense_${category.category}`,\n            type: 'warning',\n            category: 'trends',\n            title: `Aumento en gastos de ${category.category}`,\n            description: `Tus gastos en ${category.category} están aumentando. Considera revisar estos gastos para mantenerlos bajo control.`,\n            actionText: 'Ver detalles',\n            actionLink: '/analytics',\n            priority: 'medium'\n          });\n        } else {\n          recommendations.push({\n            id: `trend_income_${category.category}`,\n            type: 'success',\n            category: 'trends',\n            title: `Aumento en ingresos de ${category.category}`,\n            description: `Tus ingresos en ${category.category} están aumentando. ¡Buen trabajo!`,\n            actionText: 'Ver detalles',\n            actionLink: '/analytics',\n            priority: 'low'\n          });\n        }\n      });\n    }\n    \n    if (trendingCategories.decreasing.length > 0) {\n      trendingCategories.decreasing.forEach(category => {\n        if (category.type === 'income') {\n          recommendations.push({\n            id: `trend_income_decrease_${category.category}`,\n            type: 'warning',\n            category: 'trends',\n            title: `Disminución en ingresos de ${category.category}`,\n            description: `Tus ingresos en ${category.category} están disminuyendo. Considera buscar alternativas para compensar esta reducción.`,\n            actionText: 'Ver detalles',\n            actionLink: '/analytics',\n            priority: 'high'\n          });\n        } else {\n          recommendations.push({\n            id: `trend_expense_decrease_${category.category}`,\n            type: 'success',\n            category: 'trends',\n            title: `Disminución en gastos de ${category.category}`,\n            description: `Tus gastos en ${category.category} están disminuyendo. ¡Sigue así!`,\n            actionText: 'Ver detalles',\n            actionLink: '/analytics',\n            priority: 'low'\n          });\n        }\n      });\n    }\n    \n    // Recomendaciones basadas en patrones recurrentes\n    if (recurringPatterns.length > 0) {\n      const subscriptions = recurringPatterns.filter(p => \n        p.frequency === 'mensual' && \n        p.avgAmount < 2000 && \n        p.confidence > 0.7\n      );\n      \n      if (subscriptions.length > 0) {\n        const totalSubscriptions = subscriptions.reduce((sum, s) => sum + s.avgAmount, 0);\n        \n        recommendations.push({\n          id: 'recurring_subscriptions',\n          type: 'info',\n          category: 'patterns',\n          title: 'Revisión de suscripciones',\n          description: `Tienes ${subscriptions.length} posibles suscripciones que suman ${totalSubscriptions.toFixed(2)} pesos mensuales. Revisa si todas son necesarias.`,\n          actionText: 'Ver detalles',\n          actionLink: '/finances',\n          priority: 'medium',\n          data: subscriptions\n        });\n      }\n      \n      // Identificar pagos recurrentes importantes\n      const importantPayments = recurringPatterns.filter(p => \n        p.avgAmount > 2000 && \n        p.confidence > 0.6\n      );\n      \n      if (importantPayments.length > 0) {\n        importantPayments.forEach(payment => {\n          if (payment.nextDate) {\n            const nextDate = new Date(payment.nextDate);\n            const today = new Date();\n            const daysUntilPayment = Math.round((nextDate - today) / (1000 * 60 * 60 * 24));\n            \n            if (daysUntilPayment <= 7 && daysUntilPayment >= 0) {\n              recommendations.push({\n                id: `upcoming_payment_${payment.title}`,\n                type: 'warning',\n                category: 'upcoming',\n                title: `Pago próximo: ${payment.title}`,\n                description: `Tienes un pago de aproximadamente ${payment.avgAmount.toFixed(2)} pesos programado para el ${new Date(payment.nextDate).toLocaleDateString('es-ES')} (en ${daysUntilPayment} días).`,\n                actionText: 'Preparar pago',\n                actionLink: '/finances',\n                priority: 'high',\n                data: payment\n              });\n            }\n          }\n        });\n      }\n    }\n    \n    // Recomendaciones basadas en metas financieras\n    if (financialGoals.length > 0) {\n      financialGoals.forEach(goal => {\n        const targetDate = new Date(goal.target_date);\n        const today = new Date();\n        const daysRemaining = Math.round((targetDate - today) / (1000 * 60 * 60 * 24));\n        \n        if (daysRemaining > 0) {\n          const progress = goal.current_amount / goal.target_amount;\n          const expectedProgress = (1 - daysRemaining / (Math.round((targetDate - new Date(goal.created_at)) / (1000 * 60 * 60 * 24))));\n          \n          if (progress < expectedProgress * 0.8) {\n            // Progreso significativamente menor al esperado\n            recommendations.push({\n              id: `goal_behind_${goal.id}`,\n              type: 'danger',\n              category: 'goals',\n              title: `Meta atrasada: ${goal.title}`,\n              description: `Estás atrasado en tu meta \"${goal.title}\". Para alcanzarla a tiempo, necesitas aumentar tus aportes.`,\n              actionText: 'Ver meta',\n              actionLink: '/financial-goals',\n              priority: 'high',\n              data: goal\n            });\n          } else if (progress < expectedProgress) {\n            // Progreso ligeramente menor al esperado\n            recommendations.push({\n              id: `goal_slightly_behind_${goal.id}`,\n              type: 'warning',\n              category: 'goals',\n              title: `Meta ligeramente atrasada: ${goal.title}`,\n              description: `Estás un poco atrasado en tu meta \"${goal.title}\". Considera aumentar tus aportes para alcanzarla a tiempo.`,\n              actionText: 'Ver meta',\n              actionLink: '/financial-goals',\n              priority: 'medium',\n              data: goal\n            });\n          } else if (progress > expectedProgress * 1.2) {\n            // Progreso mayor al esperado\n            recommendations.push({\n              id: `goal_ahead_${goal.id}`,\n              type: 'success',\n              category: 'goals',\n              title: `¡Buen progreso en tu meta: ${goal.title}!`,\n              description: `Estás adelantado en tu meta \"${goal.title}\". ¡Sigue así!`,\n              actionText: 'Ver meta',\n              actionLink: '/financial-goals',\n              priority: 'low',\n              data: goal\n            });\n          }\n          \n          // Meta próxima a vencer\n          if (daysRemaining <= 30) {\n            recommendations.push({\n              id: `goal_ending_soon_${goal.id}`,\n              type: progress >= 0.9 ? 'success' : 'warning',\n              category: 'goals',\n              title: `Meta próxima a vencer: ${goal.title}`,\n              description: `Tu meta \"${goal.title}\" vence en ${daysRemaining} días y has completado el ${(progress * 100).toFixed(0)}%.`,\n              actionText: 'Ver meta',\n              actionLink: '/financial-goals',\n              priority: daysRemaining <= 7 ? 'high' : 'medium',\n              data: goal\n            });\n          }\n        }\n      });\n    }\n    \n    // Recomendaciones basadas en ahorro\n    if (savingRecommendations.length > 0) {\n      savingRecommendations.forEach((recommendation, index) => {\n        if (recommendation.type === 'high_expense_category') {\n          recommendations.push({\n            id: `saving_high_expense_${recommendation.category}`,\n            type: 'info',\n            category: 'saving',\n            title: `Oportunidad de ahorro en ${recommendation.category}`,\n            description: recommendation.message,\n            actionText: 'Ver detalles',\n            actionLink: '/finances',\n            priority: 'medium',\n            data: recommendation\n          });\n        } else if (recommendation.type === 'small_frequent_expenses') {\n          recommendations.push({\n            id: 'saving_small_expenses',\n            type: 'info',\n            category: 'saving',\n            title: 'Gastos pequeños pero frecuentes',\n            description: recommendation.message,\n            actionText: 'Ver detalles',\n            actionLink: '/finances',\n            priority: 'medium',\n            data: recommendation\n          });\n        } else if (recommendation.type === 'subscriptions') {\n          recommendations.push({\n            id: 'saving_subscriptions',\n            type: 'info',\n            category: 'saving',\n            title: 'Revisa tus suscripciones',\n            description: recommendation.message,\n            actionText: 'Ver detalles',\n            actionLink: '/finances',\n            priority: 'medium',\n            data: recommendation\n          });\n        }\n      });\n    }\n    \n    // Recomendaciones basadas en flujo de caja\n    if (cashFlow.predictions.length > 0) {\n      const lastMonth = cashFlow.predictions[cashFlow.predictions.length - 1];\n      \n      if (lastMonth.endingBalance < 0) {\n        // Predicción de balance negativo\n        recommendations.push({\n          id: 'cashflow_negative',\n          type: 'danger',\n          category: 'cashflow',\n          title: 'Posible balance negativo',\n          description: `Según nuestras predicciones, podrías tener un balance negativo de ${lastMonth.endingBalance.toFixed(2)} pesos en los próximos meses. Considera reducir gastos o aumentar ingresos.`,\n          actionText: 'Ver predicciones',\n          actionLink: '/analytics',\n          priority: 'high',\n          data: cashFlow\n        });\n      } else if (lastMonth.endingBalance < cashFlow.currentBalance * 0.5) {\n        // Predicción de reducción significativa del balance\n        recommendations.push({\n          id: 'cashflow_decreasing',\n          type: 'warning',\n          category: 'cashflow',\n          title: 'Reducción de balance',\n          description: `Según nuestras predicciones, tu balance podría reducirse significativamente en los próximos meses. Considera revisar tus gastos.`,\n          actionText: 'Ver predicciones',\n          actionLink: '/analytics',\n          priority: 'medium',\n          data: cashFlow\n        });\n      } else if (lastMonth.endingBalance > cashFlow.currentBalance * 1.5) {\n        // Predicción de aumento significativo del balance\n        recommendations.push({\n          id: 'cashflow_increasing',\n          type: 'success',\n          category: 'cashflow',\n          title: 'Aumento de balance',\n          description: `Según nuestras predicciones, tu balance podría aumentar significativamente en los próximos meses. ¡Buen trabajo!`,\n          actionText: 'Ver predicciones',\n          actionLink: '/analytics',\n          priority: 'low',\n          data: cashFlow\n        });\n      }\n    }\n    \n    // Ordenar recomendaciones por prioridad\n    const priorityOrder = { high: 0, medium: 1, low: 2 };\n    const sortedRecommendations = recommendations.sort((a, b) => {\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\n    });\n    \n    // Guardar recomendaciones en caché\n    const recommendationsCache = getFromLocalStorage(RECOMMENDATIONS_CACHE_KEY) || {};\n    recommendationsCache.financial = sortedRecommendations;\n    recommendationsCache.timestamp = Date.now();\n    saveToLocalStorage(RECOMMENDATIONS_CACHE_KEY, recommendationsCache);\n    \n    return sortedRecommendations;\n  } catch (error) {\n    console.error('Error al generar recomendaciones financieras:', error);\n    return [];\n  }\n};\n\n/**\n * Generar recomendaciones de productividad personalizadas\n * @returns {Promise<Array>} - Lista de recomendaciones\n */\nexport const generateProductivityRecommendations = async () => {\n  try {\n    // Verificar si hay recomendaciones en caché\n    const cachedRecommendations = getFromLocalStorage(RECOMMENDATIONS_CACHE_KEY);\n    if (\n      cachedRecommendations &&\n      cachedRecommendations.productivity &&\n      cachedRecommendations.timestamp &&\n      Date.now() - cachedRecommendations.timestamp < RECOMMENDATIONS_CACHE_DURATION\n    ) {\n      return cachedRecommendations.productivity;\n    }\n\n    // Obtener datos necesarios\n    const tasks = await getTasks();\n    const events = await getEvents();\n    \n    const recommendations = [];\n    \n    // Recomendaciones basadas en tareas pendientes\n    const pendingTasks = tasks.filter(task => task.status !== 'completed');\n    const overdueTasks = pendingTasks.filter(task => {\n      if (!task.due_date) return false;\n      return new Date(task.due_date) < new Date();\n    });\n    \n    if (overdueTasks.length > 0) {\n      recommendations.push({\n        id: 'overdue_tasks',\n        type: 'danger',\n        category: 'tasks',\n        title: 'Tareas vencidas',\n        description: `Tienes ${overdueTasks.length} tareas vencidas. Considera priorizarlas o ajustar sus fechas de vencimiento.`,\n        actionText: 'Ver tareas',\n        actionLink: '/tasks',\n        priority: 'high',\n        data: overdueTasks\n      });\n    }\n    \n    // Tareas próximas a vencer\n    const soonDueTasks = pendingTasks.filter(task => {\n      if (!task.due_date) return false;\n      const dueDate = new Date(task.due_date);\n      const today = new Date();\n      const daysUntilDue = Math.round((dueDate - today) / (1000 * 60 * 60 * 24));\n      return daysUntilDue >= 0 && daysUntilDue <= 3;\n    });\n    \n    if (soonDueTasks.length > 0) {\n      recommendations.push({\n        id: 'soon_due_tasks',\n        type: 'warning',\n        category: 'tasks',\n        title: 'Tareas próximas a vencer',\n        description: `Tienes ${soonDueTasks.length} tareas que vencen en los próximos 3 días.`,\n        actionText: 'Ver tareas',\n        actionLink: '/tasks',\n        priority: 'medium',\n        data: soonDueTasks\n      });\n    }\n    \n    // Recomendaciones basadas en eventos próximos\n    const upcomingEvents = events.filter(event => {\n      const eventDate = new Date(event.start_date);\n      const today = new Date();\n      const daysUntilEvent = Math.round((eventDate - today) / (1000 * 60 * 60 * 24));\n      return daysUntilEvent >= 0 && daysUntilEvent <= 3;\n    });\n    \n    if (upcomingEvents.length > 0) {\n      recommendations.push({\n        id: 'upcoming_events',\n        type: 'info',\n        category: 'events',\n        title: 'Eventos próximos',\n        description: `Tienes ${upcomingEvents.length} eventos programados para los próximos 3 días.`,\n        actionText: 'Ver calendario',\n        actionLink: '/calendar',\n        priority: 'medium',\n        data: upcomingEvents\n      });\n    }\n    \n    // Detectar días con muchos eventos\n    const eventsByDay = {};\n    events.forEach(event => {\n      const dateKey = event.start_date.split('T')[0];\n      if (!eventsByDay[dateKey]) {\n        eventsByDay[dateKey] = [];\n      }\n      eventsByDay[dateKey].push(event);\n    });\n    \n    Object.keys(eventsByDay).forEach(dateKey => {\n      const eventsForDay = eventsByDay[dateKey];\n      if (eventsForDay.length >= 4) {\n        const eventDate = new Date(dateKey);\n        const today = new Date();\n        const daysUntilEvent = Math.round((eventDate - today) / (1000 * 60 * 60 * 24));\n        \n        if (daysUntilEvent >= 0 && daysUntilEvent <= 7) {\n          recommendations.push({\n            id: `busy_day_${dateKey}`,\n            type: 'warning',\n            category: 'events',\n            title: 'Día con muchos eventos',\n            description: `Tienes ${eventsForDay.length} eventos programados para el ${eventDate.toLocaleDateString('es-ES')}. Considera reorganizar tu agenda si es posible.`,\n            actionText: 'Ver calendario',\n            actionLink: '/calendar',\n            priority: daysUntilEvent <= 2 ? 'high' : 'medium',\n            data: eventsForDay\n          });\n        }\n      }\n    });\n    \n    // Detectar categorías de tareas con muchas pendientes\n    const tasksByCategory = {};\n    pendingTasks.forEach(task => {\n      const category = task.category || 'Sin categoría';\n      if (!tasksByCategory[category]) {\n        tasksByCategory[category] = [];\n      }\n      tasksByCategory[category].push(task);\n    });\n    \n    Object.keys(tasksByCategory).forEach(category => {\n      const tasksInCategory = tasksByCategory[category];\n      if (tasksInCategory.length >= 5) {\n        recommendations.push({\n          id: `many_tasks_${category}`,\n          type: 'info',\n          category: 'tasks',\n          title: `Muchas tareas en ${category}`,\n          description: `Tienes ${tasksInCategory.length} tareas pendientes en la categoría ${category}. Considera priorizarlas o dividirlas en subtareas.`,\n          actionText: 'Ver tareas',\n          actionLink: '/tasks',\n          priority: 'medium',\n          data: tasksInCategory\n        });\n      }\n    });\n    \n    // Ordenar recomendaciones por prioridad\n    const priorityOrder = { high: 0, medium: 1, low: 2 };\n    const sortedRecommendations = recommendations.sort((a, b) => {\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\n    });\n    \n    // Guardar recomendaciones en caché\n    const recommendationsCache = getFromLocalStorage(RECOMMENDATIONS_CACHE_KEY) || {};\n    recommendationsCache.productivity = sortedRecommendations;\n    recommendationsCache.timestamp = Date.now();\n    saveToLocalStorage(RECOMMENDATIONS_CACHE_KEY, recommendationsCache);\n    \n    return sortedRecommendations;\n  } catch (error) {\n    console.error('Error al generar recomendaciones de productividad:', error);\n    return [];\n  }\n};\n\n/**\n * Obtener todas las recomendaciones personalizadas\n * @returns {Promise<Object>} - Todas las recomendaciones\n */\nexport const getAllRecommendations = async () => {\n  try {\n    const financial = await generateFinancialRecommendations();\n    const productivity = await generateProductivityRecommendations();\n    \n    return {\n      financial,\n      productivity,\n      all: [...financial, ...productivity].sort((a, b) => {\n        const priorityOrder = { high: 0, medium: 1, low: 2 };\n        return priorityOrder[a.priority] - priorityOrder[b.priority];\n      })\n    };\n  } catch (error) {\n    console.error('Error al obtener todas las recomendaciones:', error);\n    return {\n      financial: [],\n      productivity: [],\n      all: []\n    };\n  }\n};\n\n/**\n * Marcar una recomendación como vista o ignorada\n * @param {string} recommendationId - ID de la recomendación\n * @param {string} status - Estado ('viewed', 'ignored', 'actioned')\n * @returns {boolean} - true si se actualizó correctamente\n */\nexport const updateRecommendationStatus = (recommendationId, status) => {\n  try {\n    const viewedRecommendations = getFromLocalStorage('viewed_recommendations') || {};\n    \n    viewedRecommendations[recommendationId] = {\n      status,\n      timestamp: Date.now()\n    };\n    \n    saveToLocalStorage('viewed_recommendations', viewedRecommendations);\n    return true;\n  } catch (error) {\n    console.error('Error al actualizar estado de recomendación:', error);\n    return false;\n  }\n};\n\n/**\n * Verificar si una recomendación ha sido vista o ignorada\n * @param {string} recommendationId - ID de la recomendación\n * @returns {Object|null} - Estado de la recomendación o null si no se ha visto\n */\nexport const getRecommendationStatus = (recommendationId) => {\n  try {\n    const viewedRecommendations = getFromLocalStorage('viewed_recommendations') || {};\n    return viewedRecommendations[recommendationId] || null;\n  } catch (error) {\n    console.error('Error al obtener estado de recomendación:', error);\n    return null;\n  }\n};\n","import { supabase } from './supabase';\n\nexport const getFinancialGoals = async () => {\n  const { data, error } = await supabase\n    .from('financial_goals')\n    .select('*')\n    .order('target_date', { ascending: true });\n    \n  if (error) {\n    console.error('Error fetching financial goals:', error);\n    return [];\n  }\n  \n  return data || [];\n};\n\nexport const getFinancialGoalById = async (id) => {\n  const { data, error } = await supabase\n    .from('financial_goals')\n    .select('*')\n    .eq('id', id)\n    .single();\n    \n  if (error) {\n    console.error('Error fetching financial goal:', error);\n    return null;\n  }\n  \n  return data;\n};\n\nexport const createFinancialGoal = async (goal) => {\n  // Asegurarse de que el usuario actual sea el propietario de la meta\n  const { data: { user } } = await supabase.auth.getUser();\n  \n  const { data, error } = await supabase\n    .from('financial_goals')\n    .insert([{ ...goal, user_id: user.id }])\n    .select();\n    \n  if (error) {\n    console.error('Error creating financial goal:', error);\n    return null;\n  }\n  \n  return data?.[0] || null;\n};\n\nexport const updateFinancialGoal = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('financial_goals')\n    .update(updates)\n    .eq('id', id)\n    .select();\n    \n  if (error) {\n    console.error('Error updating financial goal:', error);\n    return null;\n  }\n  \n  return data?.[0] || null;\n};\n\nexport const deleteFinancialGoal = async (id) => {\n  const { error } = await supabase\n    .from('financial_goals')\n    .delete()\n    .eq('id', id);\n    \n  if (error) {\n    console.error('Error deleting financial goal:', error);\n    return false;\n  }\n  \n  return true;\n};\n\nexport const updateGoalProgress = async (id, amount) => {\n  // Primero obtenemos la meta actual\n  const { data: goal, error: fetchError } = await supabase\n    .from('financial_goals')\n    .select('*')\n    .eq('id', id)\n    .single();\n    \n  if (fetchError) {\n    console.error('Error fetching financial goal for progress update:', fetchError);\n    return null;\n  }\n  \n  // Calculamos el nuevo monto actual\n  const newAmount = goal.current_amount + amount;\n  \n  // Actualizamos la meta\n  const { data, error } = await supabase\n    .from('financial_goals')\n    .update({ current_amount: newAmount, updated_at: new Date() })\n    .eq('id', id)\n    .select();\n    \n  if (error) {\n    console.error('Error updating financial goal progress:', error);\n    return null;\n  }\n  \n  return data?.[0] || null;\n};\n","import { supabase } from './supabase';\n\nexport const getTasks = async () => {\n  const { data, error } = await supabase\n    .from('tasks')\n    .select('*')\n    .order('created_at', { ascending: false });\n    \n  if (error) {\n    console.error('Error fetching tasks:', error);\n    return [];\n  }\n  \n  return data || [];\n};\n\nexport const getTaskById = async (id) => {\n  const { data, error } = await supabase\n    .from('tasks')\n    .select('*')\n    .eq('id', id)\n    .single();\n    \n  if (error) {\n    console.error('Error fetching task:', error);\n    return null;\n  }\n  \n  return data;\n};\n\nexport const createTask = async (task) => {\n  // Asegurarse de que el usuario actual sea el propietario de la tarea\n  const { data: { user } } = await supabase.auth.getUser();\n  \n  const { data, error } = await supabase\n    .from('tasks')\n    .insert([{ ...task, user_id: user.id }])\n    .select();\n    \n  if (error) {\n    console.error('Error creating task:', error);\n    return null;\n  }\n  \n  return data?.[0] || null;\n};\n\nexport const updateTask = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('tasks')\n    .update(updates)\n    .eq('id', id)\n    .select();\n    \n  if (error) {\n    console.error('Error updating task:', error);\n    return null;\n  }\n  \n  return data?.[0] || null;\n};\n\nexport const deleteTask = async (id) => {\n  const { error } = await supabase\n    .from('tasks')\n    .delete()\n    .eq('id', id);\n    \n  if (error) {\n    console.error('Error deleting task:', error);\n    return false;\n  }\n  \n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { \n  FiAlertCircle, \n  FiCheckCircle, \n  FiInfo, \n  FiRefreshCw, \n  FiArrowRight, \n  FiX,\n  FiThumbsUp,\n  FiTrendingUp,\n  FiCalendar,\n  FiDollarSign,\n  FiTarget\n} from 'react-icons/fi';\nimport { \n  getAllRecommendations, \n  updateRecommendationStatus, \n  getRecommendationStatus \n} from '../../services/recommendationService';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport AnimatedButton from '../common/AnimatedButton';\nimport { showError, showSuccess } from '../common/Notification';\n\n// Estilos\nconst RecommendationsContainer = styled.div`\n  background-color: var(--card-bg);\n  border-radius: var(--border-radius);\n  box-shadow: var(--card-shadow);\n  padding: 24px;\n  margin-bottom: 32px;\n`;\n\nconst RecommendationsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.06);\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n  }\n`;\n\nconst RecommendationsTitle = styled.h2`\n  margin: 0;\n  color: var(--text-dark);\n  font-size: 1.5rem;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  \n  svg {\n    color: var(--primary-color);\n  }\n`;\n\nconst TabsContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.06);\n  \n  @media (max-width: 768px) {\n    overflow-x: auto;\n    padding-bottom: 8px;\n    margin-bottom: 16px;\n  }\n`;\n\nconst Tab = styled.button`\n  background: none;\n  border: none;\n  padding: 8px 16px;\n  font-size: 1rem;\n  color: ${props => props.active ? 'var(--primary-color)' : 'var(--text-medium)'};\n  font-weight: ${props => props.active ? '600' : '400'};\n  border-bottom: 2px solid ${props => props.active ? 'var(--primary-color)' : 'transparent'};\n  cursor: pointer;\n  transition: all 0.3s;\n  \n  &:hover {\n    color: var(--primary-color);\n  }\n  \n  .badge {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    background-color: ${props => props.active ? 'var(--primary-color)' : 'var(--text-light)'};\n    color: white;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    font-size: 0.8rem;\n    margin-left: 8px;\n  }\n`;\n\nconst RecommendationCard = styled.div`\n  background-color: white;\n  border-radius: var(--border-radius);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n  padding: 16px;\n  margin-bottom: 16px;\n  border-left: 4px solid ${props => {\n    switch (props.type) {\n      case 'success': return 'var(--success-color)';\n      case 'warning': return 'var(--warning-color)';\n      case 'danger': return 'var(--danger-color)';\n      case 'info': return 'var(--info-color)';\n      default: return 'var(--primary-color)';\n    }\n  }};\n  position: relative;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst RecommendationTitle = styled.h3`\n  margin: 0 0 8px 0;\n  font-size: 1.1rem;\n  color: var(--text-dark);\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding-right: 30px;\n  \n  svg {\n    color: ${props => {\n      switch (props.type) {\n        case 'success': return 'var(--success-color)';\n        case 'warning': return 'var(--warning-color)';\n        case 'danger': return 'var(--danger-color)';\n        case 'info': return 'var(--info-color)';\n        default: return 'var(--primary-color)';\n      }\n    }};\n  }\n`;\n\nconst RecommendationContent = styled.div`\n  margin-bottom: 16px;\n  font-size: 0.95rem;\n  color: var(--text-medium);\n  line-height: 1.5;\n`;\n\nconst RecommendationActions = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-top: 16px;\n`;\n\nconst DismissButton = styled.button`\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  background: none;\n  border: none;\n  color: var(--text-light);\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n  \n  &:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n    color: var(--text-medium);\n  }\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 48px 24px;\n  color: var(--text-medium);\n  \n  h4 {\n    margin-bottom: 16px;\n    color: var(--text-dark);\n  }\n  \n  p {\n    margin-bottom: 24px;\n  }\n`;\n\nconst PriorityBadge = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 500;\n  margin-left: 8px;\n  background-color: ${props => {\n    switch (props.priority) {\n      case 'high': return 'rgba(255, 99, 132, 0.1)';\n      case 'medium': return 'rgba(255, 159, 64, 0.1)';\n      case 'low': return 'rgba(75, 192, 192, 0.1)';\n      default: return 'rgba(153, 102, 255, 0.1)';\n    }\n  }};\n  color: ${props => {\n    switch (props.priority) {\n      case 'high': return 'var(--danger-color)';\n      case 'medium': return 'var(--warning-color)';\n      case 'low': return 'var(--success-color)';\n      default: return 'var(--primary-color)';\n    }\n  }};\n`;\n\n/**\n * Componente para mostrar recomendaciones personalizadas\n * @returns {JSX.Element} - Componente de recomendaciones personalizadas\n */\nconst PersonalizedRecommendations = () => {\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('all');\n  const [recommendations, setRecommendations] = useState({\n    all: [],\n    financial: [],\n    productivity: []\n  });\n  const [hasData, setHasData] = useState(false);\n  \n  // Cargar recomendaciones\n  useEffect(() => {\n    const loadRecommendations = async () => {\n      try {\n        setLoading(true);\n        \n        // Obtener todas las recomendaciones\n        const data = await getAllRecommendations();\n        \n        // Filtrar recomendaciones ya vistas o ignoradas\n        const filteredRecommendations = {\n          all: filterViewedRecommendations(data.all),\n          financial: filterViewedRecommendations(data.financial),\n          productivity: filterViewedRecommendations(data.productivity)\n        };\n        \n        setRecommendations(filteredRecommendations);\n        \n        // Verificar si hay recomendaciones para mostrar\n        setHasData(\n          filteredRecommendations.all.length > 0 || \n          filteredRecommendations.financial.length > 0 || \n          filteredRecommendations.productivity.length > 0\n        );\n      } catch (error) {\n        console.error('Error al cargar recomendaciones:', error);\n        showError('Error al cargar recomendaciones personalizadas');\n        setHasData(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadRecommendations();\n  }, []);\n  \n  // Filtrar recomendaciones ya vistas o ignoradas\n  const filterViewedRecommendations = (recommendations) => {\n    return recommendations.filter(recommendation => {\n      const status = getRecommendationStatus(recommendation.id);\n      return !status || (status.status !== 'ignored' && status.status !== 'actioned');\n    });\n  };\n  \n  // Manejar acción de recomendación\n  const handleAction = (recommendation) => {\n    // Marcar como accionada\n    updateRecommendationStatus(recommendation.id, 'actioned');\n    \n    // Redirigir a la página correspondiente\n    if (recommendation.actionLink) {\n      window.location.href = recommendation.actionLink;\n    }\n    \n    // Actualizar estado local\n    setRecommendations(prev => {\n      const updatedAll = prev.all.filter(r => r.id !== recommendation.id);\n      const updatedFinancial = prev.financial.filter(r => r.id !== recommendation.id);\n      const updatedProductivity = prev.productivity.filter(r => r.id !== recommendation.id);\n      \n      return {\n        all: updatedAll,\n        financial: updatedFinancial,\n        productivity: updatedProductivity\n      };\n    });\n    \n    showSuccess('Recomendación marcada como completada');\n  };\n  \n  // Manejar descarte de recomendación\n  const handleDismiss = (recommendation) => {\n    // Marcar como ignorada\n    updateRecommendationStatus(recommendation.id, 'ignored');\n    \n    // Actualizar estado local\n    setRecommendations(prev => {\n      const updatedAll = prev.all.filter(r => r.id !== recommendation.id);\n      const updatedFinancial = prev.financial.filter(r => r.id !== recommendation.id);\n      const updatedProductivity = prev.productivity.filter(r => r.id !== recommendation.id);\n      \n      return {\n        all: updatedAll,\n        financial: updatedFinancial,\n        productivity: updatedProductivity\n      };\n    });\n    \n    showSuccess('Recomendación descartada');\n  };\n  \n  // Obtener icono según el tipo de recomendación\n  const getRecommendationIcon = (type) => {\n    switch (type) {\n      case 'success':\n        return <FiCheckCircle />;\n      case 'warning':\n        return <FiAlertCircle />;\n      case 'danger':\n        return <FiAlertCircle />;\n      case 'info':\n        return <FiInfo />;\n      default:\n        return <FiInfo />;\n    }\n  };\n  \n  // Obtener icono según la categoría de recomendación\n  const getCategoryIcon = (category) => {\n    switch (category) {\n      case 'trends':\n        return <FiTrendingUp />;\n      case 'goals':\n        return <FiTarget />;\n      case 'cashflow':\n        return <FiDollarSign />;\n      case 'tasks':\n      case 'events':\n        return <FiCalendar />;\n      default:\n        return <FiInfo />;\n    }\n  };\n  \n  // Renderizar contenido según la pestaña activa\n  const renderContent = () => {\n    if (loading) {\n      return <LoadingSpinner text=\"Cargando recomendaciones...\" />;\n    }\n    \n    const currentRecommendations = recommendations[activeTab] || [];\n    \n    if (currentRecommendations.length === 0) {\n      return (\n        <EmptyState>\n          <h4>No hay recomendaciones disponibles</h4>\n          <p>Actualmente no tenemos recomendaciones personalizadas para ti en esta categoría.</p>\n          <AnimatedButton onClick={() => window.location.reload()}>\n            <FiRefreshCw /> Actualizar\n          </AnimatedButton>\n        </EmptyState>\n      );\n    }\n    \n    return (\n      <>\n        {currentRecommendations.map((recommendation) => (\n          <RecommendationCard \n            key={recommendation.id} \n            type={recommendation.type}\n          >\n            <RecommendationTitle type={recommendation.type}>\n              {getRecommendationIcon(recommendation.type)} \n              {recommendation.title}\n              <PriorityBadge priority={recommendation.priority}>\n                {recommendation.priority === 'high' ? 'Alta' : \n                 recommendation.priority === 'medium' ? 'Media' : 'Baja'}\n              </PriorityBadge>\n            </RecommendationTitle>\n            \n            <RecommendationContent>\n              {recommendation.description}\n            </RecommendationContent>\n            \n            <RecommendationActions>\n              <AnimatedButton \n                onClick={() => handleAction(recommendation)}\n                variant=\"primary\"\n                size=\"small\"\n              >\n                {recommendation.actionText || 'Ver detalles'} <FiArrowRight />\n              </AnimatedButton>\n              \n              <AnimatedButton \n                onClick={() => handleDismiss(recommendation)}\n                variant=\"outline\"\n                size=\"small\"\n              >\n                <FiThumbsUp /> Gracias\n              </AnimatedButton>\n            </RecommendationActions>\n            \n            <DismissButton \n              onClick={() => handleDismiss(recommendation)}\n              title=\"Descartar recomendación\"\n            >\n              <FiX />\n            </DismissButton>\n          </RecommendationCard>\n        ))}\n      </>\n    );\n  };\n  \n  return (\n    <RecommendationsContainer>\n      <RecommendationsHeader>\n        <RecommendationsTitle>\n          <FiInfo /> Recomendaciones Personalizadas\n        </RecommendationsTitle>\n        <AnimatedButton\n          variant=\"outline\"\n          onClick={() => window.location.reload()}\n          disabled={loading}\n        >\n          <FiRefreshCw /> Actualizar\n        </AnimatedButton>\n      </RecommendationsHeader>\n      \n      <TabsContainer>\n        <Tab\n          active={activeTab === 'all'}\n          onClick={() => setActiveTab('all')}\n        >\n          Todas <span className=\"badge\">{recommendations.all.length}</span>\n        </Tab>\n        <Tab\n          active={activeTab === 'financial'}\n          onClick={() => setActiveTab('financial')}\n        >\n          Financieras <span className=\"badge\">{recommendations.financial.length}</span>\n        </Tab>\n        <Tab\n          active={activeTab === 'productivity'}\n          onClick={() => setActiveTab('productivity')}\n        >\n          Productividad <span className=\"badge\">{recommendations.productivity.length}</span>\n        </Tab>\n      </TabsContainer>\n      \n      {renderContent()}\n    </RecommendationsContainer>\n  );\n};\n\nexport default PersonalizedRecommendations;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { FiRefreshCw, FiDollarSign, FiArrowRight, FiCalendar } from 'react-icons/fi';\nimport { Line } from 'react-chartjs-2';\nimport { getRatesHistory, getExchangeRates } from '../../services/currencyService';\nimport AnimatedButton from '../common/AnimatedButton';\n\nconst HistoryContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: var(--border-radius);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  padding: 24px;\n  margin-bottom: 32px;\n  color: #ffffff;\n`;\n\nconst HistoryHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 16px;\n  }\n`;\n\nconst HistoryTitle = styled.h2`\n  margin: 0;\n  color: #ffffff;\n  font-size: 1.5rem;\n  font-weight: 600;\n  position: relative;\n  padding-left: 16px;\n  \n  &::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 4px;\n    height: 24px;\n    background: linear-gradient(to bottom, var(--primary-color), var(--secondary-color));\n    border-radius: 2px;\n  }\n`;\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  \n  @media (max-width: 768px) {\n    width: 100%;\n    justify-content: space-between;\n  }\n`;\n\nconst CurrencySelector = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background-color: #2a2a2a;\n  padding: 8px 12px;\n  border-radius: var(--border-radius);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n\nconst CurrencyOption = styled.div`\n  padding: 6px 12px;\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  background-color: ${props => props.selected ? 'var(--primary-color)' : 'transparent'};\n  color: ${props => props.selected ? '#ffffff' : '#b0b0b0'};\n  transition: all var(--transition-speed);\n  \n  &:hover {\n    background-color: ${props => props.selected ? 'var(--primary-color)' : 'rgba(255, 255, 255, 0.1)'};\n  }\n`;\n\nconst ChartContainer = styled.div`\n  height: 400px;\n  position: relative;\n  margin-top: 24px;\n`;\n\nconst CurrentRateContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n  margin-bottom: 24px;\n  background-color: #2a2a2a;\n  padding: 16px;\n  border-radius: var(--border-radius);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n\nconst CurrencyBox = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: #ffffff;\n`;\n\nconst RateValue = styled.div`\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: var(--primary-color);\n`;\n\nconst LastUpdated = styled.div`\n  font-size: 0.9rem;\n  color: #b0b0b0;\n  text-align: center;\n  margin-top: 8px;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--border-radius);\n  z-index: 10;\n`;\n\nconst SpinningIcon = styled(FiRefreshCw)`\n  font-size: 2rem;\n  color: var(--primary-color);\n  animation: spin 1s linear infinite;\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst NoDataMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 200px;\n  color: #b0b0b0;\n  text-align: center;\n  \n  p {\n    margin-top: 16px;\n    max-width: 400px;\n  }\n`;\n\n/**\n * Componente para mostrar el historial de tasas de cambio\n * @returns {JSX.Element} - Componente de historial de tasas de cambio\n */\nconst ExchangeRateHistory = () => {\n  const [history, setHistory] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [baseCurrency, setBaseCurrency] = useState('USD');\n  const [targetCurrency, setTargetCurrency] = useState('ARS');\n  const [currentRate, setCurrentRate] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  \n  // Cargar historial al montar el componente\n  useEffect(() => {\n    loadHistory();\n  }, []);\n  \n  // Cargar historial cuando cambia la moneda\n  useEffect(() => {\n    if (history.length > 0) {\n      calculateCurrentRate();\n    }\n  }, [baseCurrency, targetCurrency, history]);\n  \n  // Cargar historial de tasas de cambio\n  const loadHistory = () => {\n    const ratesHistory = getRatesHistory();\n    setHistory(ratesHistory);\n    \n    if (ratesHistory.length > 0) {\n      setLastUpdated(new Date(ratesHistory[0].timestamp));\n    }\n  };\n  \n  // Calcular tasa de cambio actual\n  const calculateCurrentRate = () => {\n    if (history.length === 0) return;\n    \n    const latestRates = history[0].rates;\n    \n    // Si las monedas son iguales, la tasa es 1\n    if (baseCurrency === targetCurrency) {\n      setCurrentRate(1);\n      return;\n    }\n    \n    // Convertir a través de USD (moneda base)\n    const baseRate = baseCurrency === 'USD' ? 1 : latestRates[baseCurrency];\n    const targetRate = targetCurrency === 'USD' ? 1 : latestRates[targetCurrency];\n    \n    // Calcular tasa de cambio\n    setCurrentRate(targetRate / baseRate);\n  };\n  \n  // Actualizar tasas de cambio\n  const handleRefresh = async () => {\n    try {\n      setLoading(true);\n      \n      // Forzar actualización de tasas (no usar caché)\n      localStorage.removeItem('exchange_rates');\n      \n      // Obtener nuevas tasas\n      await getExchangeRates();\n      \n      // Recargar historial\n      loadHistory();\n      \n      // Calcular nueva tasa\n      calculateCurrentRate();\n    } catch (error) {\n      console.error('Error al actualizar tasas de cambio:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Intercambiar monedas\n  const handleSwapCurrencies = () => {\n    setBaseCurrency(targetCurrency);\n    setTargetCurrency(baseCurrency);\n  };\n  \n  // Preparar datos para el gráfico\n  const chartData = {\n    labels: history.map(entry => {\n      const date = new Date(entry.timestamp);\n      return date.toLocaleDateString('es-AR');\n    }).reverse(),\n    datasets: [\n      {\n        label: `${baseCurrency} a ${targetCurrency}`,\n        data: history.map(entry => {\n          const rates = entry.rates;\n          const baseRate = baseCurrency === 'USD' ? 1 : rates[baseCurrency];\n          const targetRate = targetCurrency === 'USD' ? 1 : rates[targetCurrency];\n          return targetRate / baseRate;\n        }).reverse(),\n        borderColor: 'rgba(99, 102, 241, 1)',\n        backgroundColor: 'rgba(99, 102, 241, 0.2)',\n        fill: true,\n        tension: 0.4,\n      }\n    ]\n  };\n  \n  // Opciones del gráfico\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          color: '#ffffff'\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: '#ffffff',\n        bodyColor: '#ffffff',\n        borderColor: 'rgba(255, 255, 255, 0.2)',\n        borderWidth: 1\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#b0b0b0'\n        }\n      },\n      x: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#b0b0b0'\n        }\n      }\n    },\n  };\n  \n  // Formatear fecha\n  const formatDate = (date) => {\n    if (!date) return '';\n    \n    return date.toLocaleString('es-AR', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  return (\n    <HistoryContainer>\n      <HistoryHeader>\n        <HistoryTitle>Historial de Tasas de Cambio</HistoryTitle>\n        <ControlsContainer>\n          <CurrencySelector>\n            <CurrencyOption \n              selected={baseCurrency === 'USD'} \n              onClick={() => setBaseCurrency('USD')}\n            >\n              USD\n            </CurrencyOption>\n            <CurrencyOption \n              selected={baseCurrency === 'ARS'} \n              onClick={() => setBaseCurrency('ARS')}\n            >\n              ARS\n            </CurrencyOption>\n          </CurrencySelector>\n          \n          <FiArrowRight size={20} />\n          \n          <CurrencySelector>\n            <CurrencyOption \n              selected={targetCurrency === 'USD'} \n              onClick={() => setTargetCurrency('USD')}\n            >\n              USD\n            </CurrencyOption>\n            <CurrencyOption \n              selected={targetCurrency === 'ARS'} \n              onClick={() => setTargetCurrency('ARS')}\n            >\n              ARS\n            </CurrencyOption>\n          </CurrencySelector>\n          \n          <AnimatedButton\n            variant=\"primary\"\n            onClick={handleSwapCurrencies}\n            title=\"Intercambiar monedas\"\n            aria-label=\"Intercambiar monedas\"\n          >\n            <FiRefreshCw />\n          </AnimatedButton>\n          \n          <AnimatedButton\n            variant=\"outline\"\n            onClick={handleRefresh}\n            title=\"Actualizar tasas\"\n            aria-label=\"Actualizar tasas de cambio\"\n          >\n            <FiRefreshCw />\n          </AnimatedButton>\n        </ControlsContainer>\n      </HistoryHeader>\n      \n      {currentRate && (\n        <CurrentRateContainer>\n          <CurrencyBox>\n            <FiDollarSign />\n            <span>1 {baseCurrency}</span>\n          </CurrencyBox>\n          \n          <FiArrowRight size={20} />\n          \n          <CurrencyBox>\n            <FiDollarSign />\n            <RateValue>{currentRate.toFixed(2)} {targetCurrency}</RateValue>\n          </CurrencyBox>\n        </CurrentRateContainer>\n      )}\n      \n      {lastUpdated && (\n        <LastUpdated>\n          <FiCalendar style={{ marginRight: '4px' }} />\n          Última actualización: {formatDate(lastUpdated)}\n        </LastUpdated>\n      )}\n      \n      <ChartContainer>\n        {loading && (\n          <LoadingOverlay>\n            <SpinningIcon />\n          </LoadingOverlay>\n        )}\n        \n        {history.length > 1 ? (\n          <Line data={chartData} options={chartOptions} />\n        ) : (\n          <NoDataMessage>\n            <FiDollarSign size={40} />\n            <p>\n              No hay suficientes datos para mostrar el historial. \n              Actualiza las tasas de cambio varias veces para generar un historial.\n            </p>\n            <AnimatedButton\n              variant=\"primary\"\n              onClick={handleRefresh}\n              style={{ marginTop: '16px' }}\n            >\n              Actualizar Tasas\n            </AnimatedButton>\n          </NoDataMessage>\n        )}\n      </ChartContainer>\n    </HistoryContainer>\n  );\n};\n\nexport default ExchangeRateHistory;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { FiBarChart2, FiTrendingUp, FiMessageSquare, FiDollarSign } from 'react-icons/fi';\nimport FinancialAnalytics from '../components/Analytics/FinancialAnalytics';\nimport PredictiveAnalytics from '../components/Analytics/PredictiveAnalytics';\nimport PersonalizedRecommendations from '../components/Analytics/PersonalizedRecommendations';\nimport ExchangeRateHistory from '../components/Analytics/ExchangeRateHistory';\n\nconst AnalyticsContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  background-color: #121212;\n  color: #ffffff;\n  padding: 24px;\n  border-radius: var(--border-radius);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n`;\n\nconst AnalyticsHeader = styled.div`\n  margin-bottom: 36px;\n\n  h1 {\n    font-size: 2.2rem;\n    font-weight: 700;\n    color: #ffffff;\n    margin-bottom: 12px;\n    position: relative;\n    padding-bottom: 12px;\n\n    &::after {\n      content: '';\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 60px;\n      height: 4px;\n      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));\n      border-radius: 2px;\n    }\n  }\n\n  p {\n    color: #b0b0b0;\n    font-size: 1.1rem;\n  }\n`;\n\nconst TabsContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-bottom: 32px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n\n  @media (max-width: 768px) {\n    overflow-x: auto;\n    padding-bottom: 8px;\n  }\n`;\n\nconst Tab = styled.button`\n  background: none;\n  border: none;\n  padding: 12px 24px;\n  font-size: 1.1rem;\n  color: ${props => props.active ? 'var(--primary-color)' : '#b0b0b0'};\n  font-weight: ${props => props.active ? '600' : '400'};\n  border-bottom: 3px solid ${props => props.active ? 'var(--primary-color)' : 'transparent'};\n  cursor: pointer;\n  transition: all 0.3s;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  &:hover {\n    color: var(--primary-color);\n  }\n\n  svg {\n    font-size: 1.2rem;\n  }\n`;\n\n/**\n * Página de análisis\n * @returns {JSX.Element} - Página de análisis\n */\nconst Analytics = () => {\n  const [activeTab, setActiveTab] = useState('financial');\n\n  // Renderizar contenido según la pestaña activa\n  const renderContent = () => {\n    switch (activeTab) {\n      case 'financial':\n        return <FinancialAnalytics />;\n      case 'predictive':\n        return <PredictiveAnalytics />;\n      case 'recommendations':\n        return <PersonalizedRecommendations />;\n      case 'exchange':\n        return <ExchangeRateHistory />;\n      default:\n        return <FinancialAnalytics />;\n    }\n  };\n\n  return (\n    <AnalyticsContainer>\n      <AnalyticsHeader>\n        <h1>Análisis</h1>\n        <p>Visualiza, analiza y recibe recomendaciones personalizadas basadas en tus datos financieros</p>\n      </AnalyticsHeader>\n\n      <TabsContainer>\n        <Tab\n          active={activeTab === 'financial'}\n          onClick={() => setActiveTab('financial')}\n        >\n          <FiBarChart2 /> Análisis Histórico\n        </Tab>\n        <Tab\n          active={activeTab === 'predictive'}\n          onClick={() => setActiveTab('predictive')}\n        >\n          <FiTrendingUp /> Predicciones\n        </Tab>\n        <Tab\n          active={activeTab === 'recommendations'}\n          onClick={() => setActiveTab('recommendations')}\n        >\n          <FiMessageSquare /> Recomendaciones\n        </Tab>\n        <Tab\n          active={activeTab === 'exchange'}\n          onClick={() => setActiveTab('exchange')}\n        >\n          <FiDollarSign /> Tasas de Cambio\n        </Tab>\n      </TabsContainer>\n\n      {renderContent()}\n    </AnalyticsContainer>\n  );\n};\n\nexport default Analytics;\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","RadialLinearScale","Title","Tooltip","Legend","Filler","AnalyticsContainer","styled","div","AnalyticsHeader","AnalyticsTitle","h2","ChartTypeSelector","ChartContainer","FiltersContainer","FilterGroup","InsightsContainer","InsightCard","props","color","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","tooltip","mode","intersect","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","scales","y","beginAtZero","grid","ticks","x","FinancialAnalytics","transactions","setTransactions","useState","loading","setLoading","chartType","setChartType","timeFrame","setTimeFrame","categoryFilter","setCategoryFilter","startDate","setStartDate","endDate","setEndDate","useEffect","async","data","getTransactions","error","console","showError","loadTransactions","filteredTransactions","useMemo","result","filter","transaction","category","date","categories","uniqueCategories","Set","forEach","add","Array","from","chartData","groupedData","dateKey","dateObj","Date","weekStart","setDate","getDate","getDay","toISOString","split","getFullYear","String","getMonth","padStart","getDateKey","income","expense","type","amount","sortedDates","Object","keys","sort","map","year","month","incomeData","expenseData","balanceData","categoryData","categoryLabels","categoryIncomeData","categoryExpenseData","categoryColors","count","colors","i","hue","push","generateColors","length","timeSeries","datasets","label","fill","tension","categoryIncome","replace","categoryExpense","statistics","totalIncome","totalExpense","balance","averageIncome","averageExpense","largestIncome","largestExpense","incomeTransactions","t","expenseTransactions","reduce","sum","Math","max","formatCurrency","Intl","NumberFormat","style","currency","format","_jsxs","children","_jsx","AnimatedButton","variant","onClick","title","FiTrendingUp","FiBarChart2","FiPieChart","htmlFor","id","value","onChange","e","target","LoadingSpinner","text","_Fragment","renderChart","Line","options","Bar","Pie","aspectRatio","Doughnut","PolarArea","PREDICTION_CACHE_KEY","PREDICTION_CACHE_DURATION","predictExpenses","months","arguments","undefined","cachedPredictions","getFromLocalStorage","expenses","timestamp","now","expensesByMonth","groupTransactionsByMonth","categoryAverages","calculateCategoryAverages","trends","calculateTrends","predictions","generatePredictions","predictionsCache","saveToLocalStorage","predictIncome","incomes","incomesByMonth","predictBalance","incomePredictions","expensePredictions","balancePredictions","monthIncome","find","p","monthIndex","total","monthExpense","getMonthName","grouped","monthKey","categoryCounts","averages","transactionsByMonth","overall","monthlyTotals","categoryTotals","firstMonth","lastMonth","monthCount","overallTrend","categoryTrends","allCategories","firstMonthWithCategory","m","lastMonthWithCategory","reverse","firstValue","lastValue","firstIndex","indexOf","monthDiff","trend","monthPrediction","predictedValue","setMonth","toLocaleString","detectRecurringPatterns","groups","key","toLowerCase","recurringGroups","a","b","intervals","prevDate","currDate","diffDays","round","avgInterval","interval","variance","pow","stdDev","sqrt","isRecurring","avgAmount","frequency","nextDate","lastDate","occurrences","confidence","group","predictCashFlow","currentBalance","runningBalance","prediction","startingBalance","endingBalance","cashFlow","PredictiveContainer","PredictiveHeader","PredictiveTitle","TabsContainer","Tab","button","active","PredictionCard","PredictionTitle","h3","PredictionContent","PredictionValue","PredictionGrid","EmptyState","PredictiveAnalytics","activeTab","setActiveTab","setPredictions","patterns","hasData","setHasData","Promise","all","loadPredictions","cashFlowChartData","borderDash","incomeExpenseChartData","window","location","reload","disabled","FiRefreshCw","renderContent","href","FiInfo","index","pattern","toLocaleDateString","getEvents","user","supabase","auth","getUser","cacheKey","fetchFromSupabase","log","select","eq","order","ascending","saveToIndexedDB","fetchFromIndexedDB","getFromIndexedDB","user_id","checkOnlineStatus","localData","setCachedValue","priority","withCache","err","RECOMMENDATIONS_CACHE_KEY","RECOMMENDATIONS_CACHE_DURATION","generateFinancialRecommendations","cachedRecommendations","financial","financialGoals","getFinancialGoals","recurringPatterns","trendingCategories","increasing","decreasing","expenseTrends","incomeTrends","expenseCategories","increasingExpenses","slice","decreasingExpenses","incomeCategories","increasingIncomes","decreasingIncomes","identifyTrendingCategories","savingRecommendations","categoryExpenses","categoryPercentages","highExpenseCategories","percentage","recommendations","potentialSaving","currentAmount","message","toFixed","smallExpenses","totalSmallExpense","totalAmount","subscriptions","totalSubscriptions","s","generateSavingRecommendations","description","actionText","actionLink","importantPayments","payment","today","daysUntilPayment","goal","targetDate","target_date","daysRemaining","progress","current_amount","target_amount","expectedProgress","created_at","recommendation","priorityOrder","high","medium","low","sortedRecommendations","recommendationsCache","generateProductivityRecommendations","productivity","tasks","getTasks","events","pendingTasks","task","status","overdueTasks","due_date","soonDueTasks","dueDate","daysUntilDue","upcomingEvents","event","eventDate","start_date","daysUntilEvent","eventsByDay","eventsForDay","tasksByCategory","tasksInCategory","updateRecommendationStatus","recommendationId","viewedRecommendations","RecommendationsContainer","RecommendationsHeader","RecommendationsTitle","RecommendationCard","RecommendationTitle","RecommendationContent","RecommendationActions","DismissButton","PriorityBadge","span","PersonalizedRecommendations","setRecommendations","getAllRecommendations","filteredRecommendations","filterViewedRecommendations","loadRecommendations","getRecommendationStatus","handleDismiss","prev","r","showSuccess","getRecommendationIcon","FiCheckCircle","FiAlertCircle","className","currentRecommendations","handleAction","size","FiArrowRight","FiThumbsUp","FiX","HistoryContainer","HistoryHeader","HistoryTitle","ControlsContainer","CurrencySelector","CurrencyOption","selected","CurrentRateContainer","CurrencyBox","RateValue","LastUpdated","LoadingOverlay","SpinningIcon","NoDataMessage","ExchangeRateHistory","history","setHistory","baseCurrency","setBaseCurrency","targetCurrency","setTargetCurrency","currentRate","setCurrentRate","lastUpdated","setLastUpdated","loadHistory","calculateCurrentRate","ratesHistory","getRatesHistory","latestRates","rates","baseRate","targetRate","handleRefresh","localStorage","removeItem","getExchangeRates","entry","handleSwapCurrencies","FiDollarSign","FiCalendar","marginRight","day","hour","minute","marginTop","Analytics","FiMessageSquare"],"sourceRoot":""}