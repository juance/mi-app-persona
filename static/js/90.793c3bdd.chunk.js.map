{"version":3,"file":"static/js/90.793c3bdd.chunk.js","mappings":"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","sources":["services/simpleStorage.js"],"sourcesContent":["/**\n * Servicio de almacenamiento local simple\n * Este servicio proporciona funciones básicas para guardar y recuperar datos\n * del localStorage de manera directa y sencilla\n */\n\n// Prefijo para las claves de almacenamiento\nconst STORAGE_PREFIX = 'mi_app_personal_simple_';\n\n/**\n * Guardar datos en localStorage\n * @param {string} key - Clave\n * @param {*} data - Datos a guardar\n */\nexport const saveData = (key, data) => {\n  try {\n    const fullKey = `${STORAGE_PREFIX}${key}`;\n    localStorage.setItem(fullKey, JSON.stringify(data));\n    console.log(`Datos guardados en localStorage con clave ${key}:`, data);\n    return true;\n  } catch (error) {\n    console.error(`Error al guardar datos en localStorage con clave ${key}:`, error);\n    return false;\n  }\n};\n\n/**\n * Obtener datos de localStorage\n * @param {string} key - Clave\n * @param {*} defaultValue - Valor por defecto\n * @returns {*} - Datos guardados o valor por defecto\n */\nexport const getData = (key, defaultValue = null) => {\n  try {\n    const fullKey = `${STORAGE_PREFIX}${key}`;\n    const storedData = localStorage.getItem(fullKey);\n\n    if (!storedData) {\n      return defaultValue;\n    }\n\n    const parsedData = JSON.parse(storedData);\n    console.log(`Datos recuperados de localStorage con clave ${key}:`, parsedData);\n    return parsedData;\n  } catch (error) {\n    console.error(`Error al obtener datos de localStorage con clave ${key}:`, error);\n    return defaultValue;\n  }\n};\n\n/**\n * Eliminar datos de localStorage\n * @param {string} key - Clave\n */\nexport const removeData = (key) => {\n  try {\n    const fullKey = `${STORAGE_PREFIX}${key}`;\n    localStorage.removeItem(fullKey);\n    console.log(`Datos eliminados de localStorage con clave ${key}`);\n    return true;\n  } catch (error) {\n    console.error(`Error al eliminar datos de localStorage con clave ${key}:`, error);\n    return false;\n  }\n};\n\n// Función genérica para generar un ID único\nconst generateId = () => `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// ==================== TRANSACCIONES ====================\n\n/**\n * Guardar transacciones en localStorage\n * @param {Array} transactions - Transacciones a guardar\n */\nexport const saveTransactions = (transactions) => {\n  return saveData('transactions', transactions);\n};\n\n/**\n * Obtener transacciones de localStorage\n * @returns {Array} - Transacciones guardadas o array vacío\n */\nexport const getTransactions = () => {\n  return getData('transactions', []);\n};\n\n/**\n * Agregar una transacción\n * @param {Object} transaction - Transacción a agregar\n */\nexport const addTransaction = (transaction) => {\n  try {\n    // Generar ID si no tiene\n    const transactionWithId = {\n      ...transaction,\n      id: transaction.id || generateId()\n    };\n\n    // Obtener transacciones actuales\n    const currentTransactions = getTransactions();\n\n    // Agregar la nueva transacción al principio\n    const updatedTransactions = [transactionWithId, ...currentTransactions];\n\n    // Guardar transacciones actualizadas\n    saveTransactions(updatedTransactions);\n\n    return transactionWithId;\n  } catch (error) {\n    console.error('Error al agregar transacción:', error);\n    return null;\n  }\n};\n\n/**\n * Actualizar una transacción\n * @param {string} id - ID de la transacción\n * @param {Object} updates - Datos a actualizar\n */\nexport const updateTransaction = (id, updates) => {\n  try {\n    // Obtener transacciones actuales\n    const currentTransactions = getTransactions();\n\n    // Buscar la transacción\n    const index = currentTransactions.findIndex(t => t.id === id);\n\n    if (index === -1) {\n      console.error(`No se encontró la transacción con ID ${id}`);\n      return false;\n    }\n\n    // Actualizar la transacción\n    const updatedTransactions = [...currentTransactions];\n    updatedTransactions[index] = {\n      ...updatedTransactions[index],\n      ...updates\n    };\n\n    // Guardar transacciones actualizadas\n    saveTransactions(updatedTransactions);\n\n    return updatedTransactions[index];\n  } catch (error) {\n    console.error('Error al actualizar transacción:', error);\n    return null;\n  }\n};\n\n/**\n * Eliminar una transacción\n * @param {string} id - ID de la transacción\n */\nexport const deleteTransaction = (id) => {\n  try {\n    // Obtener transacciones actuales\n    const currentTransactions = getTransactions();\n\n    // Filtrar la transacción a eliminar\n    const updatedTransactions = currentTransactions.filter(t => t.id !== id);\n\n    // Si no se eliminó ninguna transacción, retornar false\n    if (updatedTransactions.length === currentTransactions.length) {\n      console.error(`No se encontró la transacción con ID ${id}`);\n      return false;\n    }\n\n    // Guardar transacciones actualizadas\n    saveTransactions(updatedTransactions);\n\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar transacción:', error);\n    return false;\n  }\n};\n\n// ==================== TAREAS ====================\n\n/**\n * Guardar tareas en localStorage\n * @param {Array} tasks - Tareas a guardar\n */\nexport const saveTasks = (tasks) => {\n  return saveData('tasks', tasks);\n};\n\n/**\n * Obtener tareas de localStorage\n * @returns {Array} - Tareas guardadas o array vacío\n */\nexport const getTasks = () => {\n  return getData('tasks', []);\n};\n\n/**\n * Agregar una tarea\n * @param {Object} task - Tarea a agregar\n */\nexport const addTask = (task) => {\n  try {\n    // Generar ID si no tiene\n    const taskWithId = {\n      ...task,\n      id: task.id || generateId(),\n      created_at: task.created_at || new Date().toISOString().split('T')[0]\n    };\n\n    // Obtener tareas actuales\n    const currentTasks = getTasks();\n\n    // Agregar la nueva tarea\n    const updatedTasks = [...currentTasks, taskWithId];\n\n    // Guardar tareas actualizadas\n    saveTasks(updatedTasks);\n\n    return taskWithId;\n  } catch (error) {\n    console.error('Error al agregar tarea:', error);\n    return null;\n  }\n};\n\n/**\n * Actualizar una tarea\n * @param {string} id - ID de la tarea\n * @param {Object} updates - Datos a actualizar\n */\nexport const updateTask = (id, updates) => {\n  try {\n    // Obtener tareas actuales\n    const currentTasks = getTasks();\n\n    // Buscar la tarea\n    const index = currentTasks.findIndex(t => t.id === id);\n\n    if (index === -1) {\n      console.error(`No se encontró la tarea con ID ${id}`);\n      return false;\n    }\n\n    // Actualizar la tarea\n    const updatedTasks = [...currentTasks];\n    updatedTasks[index] = {\n      ...updatedTasks[index],\n      ...updates\n    };\n\n    // Guardar tareas actualizadas\n    saveTasks(updatedTasks);\n\n    return updatedTasks[index];\n  } catch (error) {\n    console.error('Error al actualizar tarea:', error);\n    return null;\n  }\n};\n\n/**\n * Eliminar una tarea\n * @param {string} id - ID de la tarea\n */\nexport const deleteTask = (id) => {\n  try {\n    // Obtener tareas actuales\n    const currentTasks = getTasks();\n\n    // Filtrar la tarea a eliminar\n    const updatedTasks = currentTasks.filter(t => t.id !== id);\n\n    // Si no se eliminó ninguna tarea, retornar false\n    if (updatedTasks.length === currentTasks.length) {\n      console.error(`No se encontró la tarea con ID ${id}`);\n      return false;\n    }\n\n    // Guardar tareas actualizadas\n    saveTasks(updatedTasks);\n\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar tarea:', error);\n    return false;\n  }\n};\n\n/**\n * Cambiar el estado de completado de una tarea\n * @param {string} id - ID de la tarea\n * @param {boolean} completed - Estado de completado\n */\nexport const toggleTaskComplete = (id) => {\n  try {\n    // Obtener tareas actuales\n    const currentTasks = getTasks();\n\n    // Buscar la tarea\n    const index = currentTasks.findIndex(t => t.id === id);\n\n    if (index === -1) {\n      console.error(`No se encontró la tarea con ID ${id}`);\n      return false;\n    }\n\n    // Actualizar el estado de completado\n    const updatedTasks = [...currentTasks];\n    updatedTasks[index] = {\n      ...updatedTasks[index],\n      completed: !updatedTasks[index].completed\n    };\n\n    // Guardar tareas actualizadas\n    saveTasks(updatedTasks);\n\n    return updatedTasks[index];\n  } catch (error) {\n    console.error('Error al cambiar estado de tarea:', error);\n    return null;\n  }\n};\n\n// ==================== INVERSIONES ====================\n\n/**\n * Guardar inversiones en localStorage\n * @param {Array} investments - Inversiones a guardar\n */\nexport const saveInvestments = (investments) => {\n  return saveData('investments', investments);\n};\n\n/**\n * Obtener inversiones de localStorage\n * @returns {Array} - Inversiones guardadas o array vacío\n */\nexport const getInvestments = () => {\n  return getData('investments', []);\n};\n\n/**\n * Agregar una inversión\n * @param {Object} investment - Inversión a agregar\n */\nexport const addInvestment = (investment) => {\n  try {\n    // Generar ID si no tiene\n    const investmentWithId = {\n      ...investment,\n      id: investment.id || generateId()\n    };\n\n    // Obtener inversiones actuales\n    const currentInvestments = getInvestments();\n\n    // Agregar la nueva inversión\n    const updatedInvestments = [...currentInvestments, investmentWithId];\n\n    // Guardar inversiones actualizadas\n    saveInvestments(updatedInvestments);\n\n    return investmentWithId;\n  } catch (error) {\n    console.error('Error al agregar inversión:', error);\n    return null;\n  }\n};\n\n/**\n * Actualizar una inversión\n * @param {string} id - ID de la inversión\n * @param {Object} updates - Datos a actualizar\n */\nexport const updateInvestment = (id, updates) => {\n  try {\n    // Obtener inversiones actuales\n    const currentInvestments = getInvestments();\n\n    // Buscar la inversión\n    const index = currentInvestments.findIndex(i => i.id === id);\n\n    if (index === -1) {\n      console.error(`No se encontró la inversión con ID ${id}`);\n      return false;\n    }\n\n    // Actualizar la inversión\n    const updatedInvestments = [...currentInvestments];\n    updatedInvestments[index] = {\n      ...updatedInvestments[index],\n      ...updates\n    };\n\n    // Guardar inversiones actualizadas\n    saveInvestments(updatedInvestments);\n\n    return updatedInvestments[index];\n  } catch (error) {\n    console.error('Error al actualizar inversión:', error);\n    return null;\n  }\n};\n\n/**\n * Eliminar una inversión\n * @param {string} id - ID de la inversión\n */\nexport const deleteInvestment = (id) => {\n  try {\n    // Obtener inversiones actuales\n    const currentInvestments = getInvestments();\n\n    // Filtrar la inversión a eliminar\n    const updatedInvestments = currentInvestments.filter(i => i.id !== id);\n\n    // Si no se eliminó ninguna inversión, retornar false\n    if (updatedInvestments.length === currentInvestments.length) {\n      console.error(`No se encontró la inversión con ID ${id}`);\n      return false;\n    }\n\n    // Guardar inversiones actualizadas\n    saveInvestments(updatedInvestments);\n\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar inversión:', error);\n    return false;\n  }\n};\n\n// ==================== METAS FINANCIERAS ====================\n\n/**\n * Guardar metas financieras en localStorage\n * @param {Array} goals - Metas financieras a guardar\n */\nexport const saveFinancialGoals = (goals) => {\n  return saveData('financial_goals', goals);\n};\n\n/**\n * Obtener metas financieras de localStorage\n * @returns {Array} - Metas financieras guardadas o array vacío\n */\nexport const getFinancialGoals = () => {\n  return getData('financial_goals', []);\n};\n\n/**\n * Agregar una meta financiera\n * @param {Object} goal - Meta financiera a agregar\n */\nexport const addFinancialGoal = (goal) => {\n  try {\n    // Generar ID si no tiene\n    const goalWithId = {\n      ...goal,\n      id: goal.id || generateId()\n    };\n\n    // Obtener metas actuales\n    const currentGoals = getFinancialGoals();\n\n    // Agregar la nueva meta\n    const updatedGoals = [...currentGoals, goalWithId];\n\n    // Guardar metas actualizadas\n    saveFinancialGoals(updatedGoals);\n\n    return goalWithId;\n  } catch (error) {\n    console.error('Error al agregar meta financiera:', error);\n    return null;\n  }\n};\n\n/**\n * Actualizar una meta financiera\n * @param {string} id - ID de la meta\n * @param {Object} updates - Datos a actualizar\n */\nexport const updateFinancialGoal = (id, updates) => {\n  try {\n    // Obtener metas actuales\n    const currentGoals = getFinancialGoals();\n\n    // Buscar la meta\n    const index = currentGoals.findIndex(g => g.id === id);\n\n    if (index === -1) {\n      console.error(`No se encontró la meta financiera con ID ${id}`);\n      return false;\n    }\n\n    // Actualizar la meta\n    const updatedGoals = [...currentGoals];\n    updatedGoals[index] = {\n      ...updatedGoals[index],\n      ...updates\n    };\n\n    // Guardar metas actualizadas\n    saveFinancialGoals(updatedGoals);\n\n    return updatedGoals[index];\n  } catch (error) {\n    console.error('Error al actualizar meta financiera:', error);\n    return null;\n  }\n};\n\n/**\n * Eliminar una meta financiera\n * @param {string} id - ID de la meta\n */\nexport const deleteFinancialGoal = (id) => {\n  try {\n    // Obtener metas actuales\n    const currentGoals = getFinancialGoals();\n\n    // Filtrar la meta a eliminar\n    const updatedGoals = currentGoals.filter(g => g.id !== id);\n\n    // Si no se eliminó ninguna meta, retornar false\n    if (updatedGoals.length === currentGoals.length) {\n      console.error(`No se encontró la meta financiera con ID ${id}`);\n      return false;\n    }\n\n    // Guardar metas actualizadas\n    saveFinancialGoals(updatedGoals);\n\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar meta financiera:', error);\n    return false;\n  }\n};\n\n// ==================== EVENTOS DEL CALENDARIO ====================\n\n/**\n * Guardar eventos en localStorage\n * @param {Array} events - Eventos a guardar\n */\nexport const saveEvents = (events) => {\n  return saveData('events', events);\n};\n\n/**\n * Obtener eventos de localStorage\n * @returns {Array} - Eventos guardados o array vacío\n */\nexport const getEvents = () => {\n  return getData('events', []);\n};\n\n/**\n * Agregar un evento\n * @param {Object} event - Evento a agregar\n */\nexport const addEvent = (event) => {\n  try {\n    // Generar ID si no tiene\n    const eventWithId = {\n      ...event,\n      id: event.id || generateId()\n    };\n\n    // Obtener eventos actuales\n    const currentEvents = getEvents();\n\n    // Agregar el nuevo evento\n    const updatedEvents = [...currentEvents, eventWithId];\n\n    // Guardar eventos actualizados\n    saveEvents(updatedEvents);\n\n    return eventWithId;\n  } catch (error) {\n    console.error('Error al agregar evento:', error);\n    return null;\n  }\n};\n\n/**\n * Actualizar un evento\n * @param {string} id - ID del evento\n * @param {Object} updates - Datos a actualizar\n */\nexport const updateEvent = (id, updates) => {\n  try {\n    // Obtener eventos actuales\n    const currentEvents = getEvents();\n\n    // Buscar el evento\n    const index = currentEvents.findIndex(e => e.id === id);\n\n    if (index === -1) {\n      console.error(`No se encontró el evento con ID ${id}`);\n      return false;\n    }\n\n    // Actualizar el evento\n    const updatedEvents = [...currentEvents];\n    updatedEvents[index] = {\n      ...updatedEvents[index],\n      ...updates\n    };\n\n    // Guardar eventos actualizados\n    saveEvents(updatedEvents);\n\n    return updatedEvents[index];\n  } catch (error) {\n    console.error('Error al actualizar evento:', error);\n    return null;\n  }\n};\n\n/**\n * Eliminar un evento\n * @param {string} id - ID del evento\n */\nexport const deleteEvent = (id) => {\n  try {\n    // Obtener eventos actuales\n    const currentEvents = getEvents();\n\n    // Filtrar el evento a eliminar\n    const updatedEvents = currentEvents.filter(e => e.id !== id);\n\n    // Si no se eliminó ningún evento, retornar false\n    if (updatedEvents.length === currentEvents.length) {\n      console.error(`No se encontró el evento con ID ${id}`);\n      return false;\n    }\n\n    // Guardar eventos actualizados\n    saveEvents(updatedEvents);\n\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar evento:', error);\n    return false;\n  }\n};\n"],"names":["STORAGE_PREFIX","saveData","key","data","fullKey","localStorage","setItem","JSON","stringify","console","log","error","getData","defaultValue","arguments","length","undefined","storedData","getItem","parsedData","parse","generateId","Date","now","Math","random","toString","substr","saveTransactions","transactions","getTransactions","addTransaction","transaction","transactionWithId","id","updatedTransactions","updateTransaction","updates","currentTransactions","index","findIndex","t","deleteTransaction","filter","saveTasks","tasks","getTasks","addTask","task","taskWithId","created_at","toISOString","split","updatedTasks","updateTask","currentTasks","deleteTask","toggleTaskComplete","completed","saveInvestments","investments","getInvestments","addInvestment","investment","investmentWithId","updatedInvestments","updateInvestment","currentInvestments","i","deleteInvestment","saveFinancialGoals","goals","getFinancialGoals","addFinancialGoal","goal","goalWithId","updatedGoals","updateFinancialGoal","currentGoals","g","deleteFinancialGoal","saveEvents","events","getEvents","addEvent","event","eventWithId","updatedEvents","updateEvent","currentEvents","e","deleteEvent"],"sourceRoot":""}